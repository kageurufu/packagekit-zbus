// Generated by gir (https://github.com/gtk-rs/gir @ 1c7a6b57a5fc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 21b29d0e0c1a)
// from packagekit-gir-files
// DO NOT EDIT

#[cfg(feature = "v0_5_2")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
use crate::{Progress,Results};
#[cfg(feature = "v0_5_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
use crate::{Bitfield,ProgressType,SigTypeEnum};
#[cfg(feature = "v1_0_10")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_0_10")))]
use crate::{UpgradeKindEnum};
use glib::{prelude::*};
#[cfg(feature = "v0_5_2")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
use glib::{translate::*};
#[cfg(feature = "v0_5_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
use glib::{signal::{connect_raw, SignalHandlerId}};
#[cfg(feature = "v0_5_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PkClient")]
    pub struct Client(Object<ffi::PkClient, ffi::PkClientClass>);

    match fn {
        type_ => || ffi::pk_client_get_type(),
    }
}

impl Client {
        pub const NONE: Option<&'static Client> = None;
    

    /// [`Client`][crate::Client] is a nice GObject wrapper for PackageKit and makes writing
    /// frontends easy.
    ///
    /// # Returns
    ///
    /// A new [`Client`][crate::Client] instance
    #[cfg(feature = "v0_5_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    #[doc(alias = "pk_client_new")]
    pub fn new() -> Client {
        unsafe {
            from_glib_full(ffi::pk_client_new())
        }
    }
}

#[cfg(feature = "v0_5_2")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
impl Default for Client {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Client>> Sealed for T {}
}

/// Trait containing all [`struct@Client`] methods.
///
/// # Implementors
///
/// [`Client`][struct@crate::Client], [`Task`][struct@crate::Task]
pub trait ClientExt: IsA<Client> + sealed::Sealed + 'static {
    /// We may want to agree to a EULA dialog if one is presented.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `eula_id`
    /// the `<literal>`eula_id`</literal>` we are agreeing to
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_accept_eula")]
    fn accept_eula<P: FnMut(&Progress, &ProgressType)>(&self, eula_id: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_accept_eula(self.as_ref().to_glib_none().0, eula_id.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_accept_eula_async")]
    //fn accept_eula_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, eula_id: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_accept_eula_async() }
    //}

    /// Adopt a transaction.
    ///
    /// Warning: this function is synchronous, and will block. Do not use it in GUI
    /// applications.
    /// ## `transaction_id`
    /// a transaction ID such as "/21_ebcbdaae_data"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_adopt")]
    fn adopt<P: FnMut(&Progress, &ProgressType)>(&self, transaction_id: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_adopt(self.as_ref().to_glib_none().0, transaction_id.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_adopt_async")]
    //fn adopt_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, transaction_id: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_adopt_async() }
    //}

    /// Get the packages that depend this one, i.e. child.parent.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `filters`
    /// a `PkBitfield` such as [`FilterEnum::Gui`][crate::FilterEnum::Gui] | [`FilterEnum::Free`][crate::FilterEnum::Free] or [`FilterEnum::None`][crate::FilterEnum::None]
    /// ## `package_ids`
    /// a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"
    /// ## `recursive`
    /// If we should search recursively for depends
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_depends_on")]
    fn depends_on<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_depends_on(self.as_ref().to_glib_none().0, filters, package_ids.to_glib_none().0, recursive.into_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_depends_on_async")]
    //fn depends_on_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_depends_on_async() }
    //}

    /// Downloads package files to a specified location.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `package_ids`
    /// a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"
    /// ## `directory`
    /// the location where packages are to be downloaded
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_download_packages")]
    fn download_packages<P: FnMut(&Progress, &ProgressType)>(&self, package_ids: &[&str], directory: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_download_packages(self.as_ref().to_glib_none().0, package_ids.to_glib_none().0, directory.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_download_packages_async")]
    //fn download_packages_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, package_ids: &[&str], directory: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_download_packages_async() }
    //}

    /// Gets the background value.
    ///
    /// # Returns
    ///
    /// The background status.
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_client_get_background")]
    #[doc(alias = "get_background")]
    fn is_background(&self) -> bool {
        unsafe {
            from_glib(ffi::pk_client_get_background(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the maximum cache age value.
    ///
    /// # Returns
    ///
    /// The cache age in seconds
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_client_get_cache_age")]
    #[doc(alias = "get_cache_age")]
    fn cache_age(&self) -> u32 {
        unsafe {
            ffi::pk_client_get_cache_age(self.as_ref().to_glib_none().0)
        }
    }

    /// Get a list of all categories supported.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_get_categories")]
    #[doc(alias = "get_categories")]
    fn categories<P: FnMut(&Progress, &ProgressType)>(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_get_categories(self.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_categories_async")]
    //#[doc(alias = "get_categories_async")]
    //fn categories_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_categories_async() }
    //}

    /// Get details of a package, so more information can be obtained for GUI
    /// or command line tools.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `package_ids`
    /// a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_get_details")]
    #[doc(alias = "get_details")]
    fn details<P: FnMut(&Progress, &ProgressType)>(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_get_details(self.as_ref().to_glib_none().0, package_ids.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_details_async")]
    //#[doc(alias = "get_details_async")]
    //fn details_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_details_async() }
    //}

    /// Get details of a local package, so more information can be obtained for GUI
    /// or command line tools.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `files`
    /// a null terminated array of filenames
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_8_17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_17")))]
    #[doc(alias = "pk_client_get_details_local")]
    #[doc(alias = "get_details_local")]
    fn details_local<P: FnMut(&Progress, &ProgressType)>(&self, files: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_get_details_local(self.as_ref().to_glib_none().0, files.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_8_17")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_17")))]
    //#[doc(alias = "pk_client_get_details_local_async")]
    //#[doc(alias = "get_details_local_async")]
    //fn details_local_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, files: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_details_local_async() }
    //}

    /// This method should return a list of distribution upgrades that are available.
    /// It should not return updates, only major upgrades.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_get_distro_upgrades")]
    #[doc(alias = "get_distro_upgrades")]
    fn distro_upgrades<P: FnMut(&Progress, &ProgressType)>(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_get_distro_upgrades(self.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_distro_upgrades_async")]
    //#[doc(alias = "get_distro_upgrades_async")]
    //fn distro_upgrades_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_distro_upgrades_async() }
    //}

    /// Get the file list (i.e. a list of files installed) for the specified package.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `package_ids`
    /// a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_get_files")]
    #[doc(alias = "get_files")]
    fn files<P: FnMut(&Progress, &ProgressType)>(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_get_files(self.as_ref().to_glib_none().0, package_ids.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_files_async")]
    //#[doc(alias = "get_files_async")]
    //fn files_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_files_async() }
    //}

    /// Get file list of a local package, so more information can be obtained for GUI
    /// or command line tools.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `files`
    /// a null terminated array of filenames
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_9_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_9_1")))]
    #[doc(alias = "pk_client_get_files_local")]
    #[doc(alias = "get_files_local")]
    fn files_local<P: FnMut(&Progress, &ProgressType)>(&self, files: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_get_files_local(self.as_ref().to_glib_none().0, files.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_9_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_9_1")))]
    //#[doc(alias = "pk_client_get_files_local_async")]
    //#[doc(alias = "get_files_local_async")]
    //fn files_local_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, files: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_files_local_async() }
    //}

    /// Gets if the transaction client idle value.
    ///
    /// # Returns
    ///
    /// if this client is idle.
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_client_get_idle")]
    #[doc(alias = "get_idle")]
    fn is_idle(&self) -> bool {
        unsafe {
            from_glib(ffi::pk_client_get_idle(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the client interactive value.
    ///
    /// # Returns
    ///
    /// if the transaction is due to run interactivly.
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_client_get_interactive")]
    #[doc(alias = "get_interactive")]
    fn is_interactive(&self) -> bool {
        unsafe {
            from_glib(ffi::pk_client_get_interactive(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the locale used for this transaction.
    ///
    /// # Returns
    ///
    /// The locale.
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_client_get_locale")]
    #[doc(alias = "get_locale")]
    fn locale(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_client_get_locale(self.as_ref().to_glib_none().0))
        }
    }

    /// Get the old transaction list, mainly used for the transaction viewer.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `number`
    /// the number of past transactions to return, or 0 for all
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_get_old_transactions")]
    #[doc(alias = "get_old_transactions")]
    fn old_transactions<P: FnMut(&Progress, &ProgressType)>(&self, number: u32, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_get_old_transactions(self.as_ref().to_glib_none().0, number, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_old_transactions_async")]
    //#[doc(alias = "get_old_transactions_async")]
    //fn old_transactions_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, number: u32, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_old_transactions_async() }
    //}

    /// Get the list of packages from the backend
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `filters`
    /// a `PkBitfield` such as [`FilterEnum::Gui`][crate::FilterEnum::Gui] | [`FilterEnum::Free`][crate::FilterEnum::Free] or [`FilterEnum::None`][crate::FilterEnum::None]
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_get_packages")]
    #[doc(alias = "get_packages")]
    fn packages<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_get_packages(self.as_ref().to_glib_none().0, filters, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_packages_async")]
    //#[doc(alias = "get_packages_async")]
    //fn packages_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_packages_async() }
    //}

    /// Get the progress of a transaction.
    ///
    /// Warning: this function is synchronous, and will block. Do not use it in GUI
    /// applications.
    /// ## `transaction_id`
    /// The transaction id
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_get_progress")]
    #[doc(alias = "get_progress")]
    fn progress(&self, transaction_id: &str, cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<Progress, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_get_progress(self.as_ref().to_glib_none().0, transaction_id.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_progress_async")]
    //#[doc(alias = "get_progress_async")]
    //fn progress_async(&self, transaction_id: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_progress_async() }
    //}

    /// Get the list of repositories installed on the system.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `filters`
    /// a `PkBitfield` such as [`FilterEnum::Development`][crate::FilterEnum::Development] or [`FilterEnum::None`][crate::FilterEnum::None]
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_get_repo_list")]
    #[doc(alias = "get_repo_list")]
    fn repo_list<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_get_repo_list(self.as_ref().to_glib_none().0, filters, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_repo_list_async")]
    //#[doc(alias = "get_repo_list_async")]
    //fn repo_list_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_repo_list_async() }
    //}

    /// Get details about the specific update, for instance any CVE urls and
    /// severity information.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `package_ids`
    /// a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_get_update_detail")]
    #[doc(alias = "get_update_detail")]
    fn update_detail<P: FnMut(&Progress, &ProgressType)>(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_get_update_detail(self.as_ref().to_glib_none().0, package_ids.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_update_detail_async")]
    //#[doc(alias = "get_update_detail_async")]
    //fn update_detail_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_update_detail_async() }
    //}

    /// Get a list of all the packages that can be updated for all repositories.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `filters`
    /// a `PkBitfield` such as [`FilterEnum::Development`][crate::FilterEnum::Development] or [`FilterEnum::None`][crate::FilterEnum::None]
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_get_updates")]
    #[doc(alias = "get_updates")]
    fn updates<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_get_updates(self.as_ref().to_glib_none().0, filters, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_updates_async")]
    //#[doc(alias = "get_updates_async")]
    //fn updates_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_updates_async() }
    //}

    /// Install a file locally, and get the deps from the repositories.
    /// This is useful for double clicking on a .rpm or .deb file.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `transaction_flags`
    /// a transaction type bitfield
    /// ## `files`
    /// a file such as "/home/hughsie/Desktop/hal-devel-0.10.0.rpm"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "pk_client_install_files")]
    fn install_files<P: FnMut(&Progress, &ProgressType)>(&self, transaction_flags: Bitfield, files: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_install_files(self.as_ref().to_glib_none().0, transaction_flags, files.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //#[doc(alias = "pk_client_install_files_async")]
    //fn install_files_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, transaction_flags: Bitfield, files: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_install_files_async() }
    //}

    /// Install a package of the newest and most correct version.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `transaction_flags`
    /// a transaction type bitfield
    /// ## `package_ids`
    /// a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "pk_client_install_packages")]
    fn install_packages<P: FnMut(&Progress, &ProgressType)>(&self, transaction_flags: Bitfield, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_install_packages(self.as_ref().to_glib_none().0, transaction_flags, package_ids.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //#[doc(alias = "pk_client_install_packages_async")]
    //fn install_packages_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, transaction_flags: Bitfield, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_install_packages_async() }
    //}

    /// Install a software repository signature of the newest and most correct version.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `type_`
    /// the signature type, e.g. [`SigTypeEnum::Gpg`][crate::SigTypeEnum::Gpg]
    /// ## `key_id`
    /// a key ID such as "0df23df"
    /// ## `package_id`
    /// a signature_id structure such as "hal;0.0.1;i386;fedora"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_install_signature")]
    fn install_signature<P: FnMut(&Progress, &ProgressType)>(&self, type_: SigTypeEnum, key_id: &str, package_id: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_install_signature(self.as_ref().to_glib_none().0, type_.into_glib(), key_id.to_glib_none().0, package_id.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_install_signature_async")]
    //fn install_signature_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, type_: SigTypeEnum, key_id: &str, package_id: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_install_signature_async() }
    //}

    /// Refresh the cache, i.e. download new metadata from a remote URL so that
    /// package lists are up to date.
    /// This action may take a few minutes and should be done when the session and
    /// system are idle.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `force`
    /// if we should aggressively drop caches
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_refresh_cache")]
    fn refresh_cache<P: FnMut(&Progress, &ProgressType)>(&self, force: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_refresh_cache(self.as_ref().to_glib_none().0, force.into_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_refresh_cache_async")]
    //fn refresh_cache_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, force: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_refresh_cache_async() }
    //}

    /// Remove a package (optionally with dependancies) from the system.
    /// If `allow_deps` is set to [`false`], and other packages would have to be removed,
    /// then the transaction would fail.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `transaction_flags`
    /// a transaction type bitfield
    /// ## `package_ids`
    /// a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"
    /// ## `allow_deps`
    /// if other dependent packages are allowed to be removed from the computer
    /// ## `autoremove`
    /// if other packages installed at the same time should be tried to remove
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "pk_client_remove_packages")]
    fn remove_packages<P: FnMut(&Progress, &ProgressType)>(&self, transaction_flags: Bitfield, package_ids: &[&str], allow_deps: bool, autoremove: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_remove_packages(self.as_ref().to_glib_none().0, transaction_flags, package_ids.to_glib_none().0, allow_deps.into_glib(), autoremove.into_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //#[doc(alias = "pk_client_remove_packages_async")]
    //fn remove_packages_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, transaction_flags: Bitfield, package_ids: &[&str], allow_deps: bool, autoremove: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_remove_packages_async() }
    //}

    /// This transaction will try to recover from a broken package management system:
    /// e.g. the installation of a package with unsatisfied dependencies has
    /// been forced by using a low level tool (rpm or dpkg) or the
    /// system was shutdown during processing an installation.
    ///
    /// The backend will decide what is best to do.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `transaction_flags`
    /// if only trusted packages should be installed
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "pk_client_repair_system")]
    fn repair_system<P: FnMut(&Progress, &ProgressType)>(&self, transaction_flags: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_repair_system(self.as_ref().to_glib_none().0, transaction_flags, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //#[doc(alias = "pk_client_repair_system_async")]
    //fn repair_system_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, transaction_flags: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_repair_system_async() }
    //}

    /// Enable or disable the repository.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `repo_id`
    /// a repo_id structure such as "livna-devel"
    /// ## `enabled`
    /// if we should enable the repository
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_repo_enable")]
    fn repo_enable<P: FnMut(&Progress, &ProgressType)>(&self, repo_id: &str, enabled: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_repo_enable(self.as_ref().to_glib_none().0, repo_id.to_glib_none().0, enabled.into_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_repo_enable_async")]
    //fn repo_enable_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, repo_id: &str, enabled: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_repo_enable_async() }
    //}

    /// Removes a repo and optionally the packages installed from it.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `transaction_flags`
    /// transaction flags
    /// ## `repo_id`
    /// a repo_id structure such as "livna-devel"
    /// ## `autoremove`
    /// If packages should be auto-removed
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_9_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_9_1")))]
    #[doc(alias = "pk_client_repo_remove")]
    fn repo_remove<P: FnMut(&Progress, &ProgressType)>(&self, transaction_flags: Bitfield, repo_id: &str, autoremove: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_repo_remove(self.as_ref().to_glib_none().0, transaction_flags, repo_id.to_glib_none().0, autoremove.into_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_9_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_9_1")))]
    //#[doc(alias = "pk_client_repo_remove_async")]
    //fn repo_remove_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, transaction_flags: Bitfield, repo_id: &str, autoremove: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_repo_remove_async() }
    //}

    /// We may want to set a repository parameter.
    /// NOTE: this is free text, and is left to the backend to define a format.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `repo_id`
    /// a repo_id structure such as "livna-devel"
    /// ## `parameter`
    /// the parameter to change
    /// ## `value`
    /// what we should change it to
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_repo_set_data")]
    fn repo_set_data<P: FnMut(&Progress, &ProgressType)>(&self, repo_id: &str, parameter: &str, value: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_repo_set_data(self.as_ref().to_glib_none().0, repo_id.to_glib_none().0, parameter.to_glib_none().0, value.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_repo_set_data_async")]
    //fn repo_set_data_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, repo_id: &str, parameter: &str, value: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_repo_set_data_async() }
    //}

    /// Get the packages that require this one, i.e. parent.child.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `filters`
    /// a `PkBitfield` such as [`FilterEnum::Gui`][crate::FilterEnum::Gui] | [`FilterEnum::Free`][crate::FilterEnum::Free] or [`FilterEnum::None`][crate::FilterEnum::None]
    /// ## `package_ids`
    /// a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"
    /// ## `recursive`
    /// If we should search recursively for requires
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_required_by")]
    fn required_by<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_required_by(self.as_ref().to_glib_none().0, filters, package_ids.to_glib_none().0, recursive.into_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_required_by_async")]
    //fn required_by_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_required_by_async() }
    //}

    /// Resolve a package name into a `package_id`. This can return installed and
    /// available packages and allows you find out if a package is installed locally
    /// or is available in a repository.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `filters`
    /// a `PkBitfield` such as [`FilterEnum::Gui`][crate::FilterEnum::Gui] | [`FilterEnum::Free`][crate::FilterEnum::Free] or [`FilterEnum::None`][crate::FilterEnum::None]
    /// ## `packages`
    /// an array of package names to resolve, e.g. "gnome-system-tools"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_resolve")]
    fn resolve<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, packages: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_resolve(self.as_ref().to_glib_none().0, filters, packages.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_resolve_async")]
    //fn resolve_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, packages: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_resolve_async() }
    //}

    /// Search all detailed summary information to try and find a keyword.
    /// Think of this as [`search_names()`][Self::search_names()], but trying much harder and
    /// taking longer.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `filters`
    /// a `PkBitfield` such as [`FilterEnum::Gui`][crate::FilterEnum::Gui] | [`FilterEnum::Free`][crate::FilterEnum::Free] or [`FilterEnum::None`][crate::FilterEnum::None]
    /// ## `values`
    /// free text to search for, for instance, "power"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    #[doc(alias = "pk_client_search_details")]
    fn search_details<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_search_details(self.as_ref().to_glib_none().0, filters, values.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    //#[doc(alias = "pk_client_search_details_async")]
    //fn search_details_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_search_details_async() }
    //}

    /// Search for packages that provide a specific file.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `filters`
    /// a `PkBitfield` such as [`FilterEnum::Gui`][crate::FilterEnum::Gui] | [`FilterEnum::Free`][crate::FilterEnum::Free] or [`FilterEnum::None`][crate::FilterEnum::None]
    /// ## `values`
    /// file to search for, for instance, "/sbin/service"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    #[doc(alias = "pk_client_search_files")]
    fn search_files<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_search_files(self.as_ref().to_glib_none().0, filters, values.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    //#[doc(alias = "pk_client_search_files_async")]
    //fn search_files_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_search_files_async() }
    //}

    /// Return all packages in a specific group.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `filters`
    /// a `PkBitfield` such as [`FilterEnum::Gui`][crate::FilterEnum::Gui] | [`FilterEnum::Free`][crate::FilterEnum::Free] or [`FilterEnum::None`][crate::FilterEnum::None]
    /// ## `values`
    /// a group enum to search for, for instance, "system-tools"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    #[doc(alias = "pk_client_search_groups")]
    fn search_groups<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_search_groups(self.as_ref().to_glib_none().0, filters, values.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    //#[doc(alias = "pk_client_search_groups_async")]
    //fn search_groups_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_search_groups_async() }
    //}

    /// Search all the locally installed files and remote repositories for a package
    /// that matches a specific name.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `filters`
    /// a `PkBitfield` such as [`FilterEnum::Gui`][crate::FilterEnum::Gui] | [`FilterEnum::Free`][crate::FilterEnum::Free] or [`FilterEnum::None`][crate::FilterEnum::None]
    /// ## `values`
    /// free text to search for, for instance, "power"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    #[doc(alias = "pk_client_search_names")]
    fn search_names<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_search_names(self.as_ref().to_glib_none().0, filters, values.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    //#[doc(alias = "pk_client_search_names_async")]
    //fn search_names_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_search_names_async() }
    //}

    /// Sets the background value for the client. A background transaction
    /// is usually scheduled at a lower priority and is usually given less
    /// network and disk performance.
    /// ## `background`
    /// if the transaction is a background transaction
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_client_set_background")]
    fn set_background(&self, background: bool) {
        unsafe {
            ffi::pk_client_set_background(self.as_ref().to_glib_none().0, background.into_glib());
        }
    }

    /// Sets the maximum cache age value for the client.
    /// ## `cache_age`
    /// the cache age to set, where `G_MAXUINT` means "never"
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_client_set_cache_age")]
    fn set_cache_age(&self, cache_age: u32) {
        unsafe {
            ffi::pk_client_set_cache_age(self.as_ref().to_glib_none().0, cache_age);
        }
    }

    /// Sets the interactive value for the client. Interactive transactions
    /// are usually allowed to ask the user questions.
    /// ## `interactive`
    /// the value to set
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_client_set_interactive")]
    fn set_interactive(&self, interactive: bool) {
        unsafe {
            ffi::pk_client_set_interactive(self.as_ref().to_glib_none().0, interactive.into_glib());
        }
    }

    /// Sets the locale to be used for the client. This may affect returned
    /// results.
    /// ## `locale`
    /// the locale to set, e.g. "en_GB.UTF-8"
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_client_set_locale")]
    fn set_locale(&self, locale: &str) {
        unsafe {
            ffi::pk_client_set_locale(self.as_ref().to_glib_none().0, locale.to_glib_none().0);
        }
    }

    /// Update specific packages to the newest available versions.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `transaction_flags`
    /// a transaction type bitfield
    /// ## `package_ids`
    /// a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "pk_client_update_packages")]
    fn update_packages<P: FnMut(&Progress, &ProgressType)>(&self, transaction_flags: Bitfield, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_update_packages(self.as_ref().to_glib_none().0, transaction_flags, package_ids.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //#[doc(alias = "pk_client_update_packages_async")]
    //fn update_packages_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, transaction_flags: Bitfield, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_update_packages_async() }
    //}

    /// This transaction will upgrade the distro to the next version, which may
    /// involve just downloading the installer and setting up the boot device,
    /// or may involve doing an on-line upgrade.
    ///
    /// The backend will decide what is best to do.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `transaction_flags`
    /// transaction flags
    /// ## `distro_id`
    /// a distro ID such as "fedora-14"
    /// ## `upgrade_kind`
    /// a [`UpgradeKindEnum`][crate::UpgradeKindEnum] such as [`UpgradeKindEnum::Complete`][crate::UpgradeKindEnum::Complete]
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v1_0_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_0_10")))]
    #[doc(alias = "pk_client_upgrade_system")]
    fn upgrade_system<P: FnMut(&Progress, &ProgressType)>(&self, transaction_flags: Bitfield, distro_id: &str, upgrade_kind: UpgradeKindEnum, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_upgrade_system(self.as_ref().to_glib_none().0, transaction_flags, distro_id.to_glib_none().0, upgrade_kind.into_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v1_0_10")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v1_0_10")))]
    //#[doc(alias = "pk_client_upgrade_system_async")]
    //fn upgrade_system_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, transaction_flags: Bitfield, distro_id: &str, upgrade_kind: UpgradeKindEnum, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_upgrade_system_async() }
    //}

    /// This should return packages that provide the supplied attributes.
    /// This method is useful for finding out what package(s) provide a modalias
    /// or GStreamer codec string.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `filters`
    /// a `PkBitfield` such as [`FilterEnum::Gui`][crate::FilterEnum::Gui] | [`FilterEnum::Free`][crate::FilterEnum::Free] or [`FilterEnum::None`][crate::FilterEnum::None]
    /// ## `values`
    /// a search term such as "sound/mp3"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_what_provides")]
    fn what_provides<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_what_provides(self.as_ref().to_glib_none().0, filters, values.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_what_provides_async")]
    //fn what_provides_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_what_provides_async() }
    //}

    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    fn get_property_background(&self) -> bool {
        ObjectExt::property(self.as_ref(), "background")
    }

    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    fn set_property_background(&self, background: bool) {
        ObjectExt::set_property(self.as_ref(),"background", background)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_idle(&self) -> bool {
        ObjectExt::property(self.as_ref(), "idle")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_interactive(&self) -> bool {
        ObjectExt::property(self.as_ref(), "interactive")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_property_interactive(&self, interactive: bool) {
        ObjectExt::set_property(self.as_ref(),"interactive", interactive)
    }

    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    fn get_property_locale(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "locale")
    }

    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    fn set_property_locale(&self, locale: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"locale", locale)
    }

    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "background")]
    fn connect_background_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_background_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::PkClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::background\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_background_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "cache-age")]
    fn connect_cache_age_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cache_age_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::PkClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cache-age\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_cache_age_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "idle")]
    fn connect_idle_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_idle_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::PkClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::idle\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_idle_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "interactive")]
    fn connect_interactive_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_interactive_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::PkClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::interactive\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_interactive_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "locale")]
    fn connect_locale_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_locale_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::PkClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::locale\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_locale_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Client>> ClientExt for O {}
