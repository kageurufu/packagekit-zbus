// Generated by gir (https://github.com/gtk-rs/gir @ 1c7a6b57a5fc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 21b29d0e0c1a)
// from packagekit-gir-files
// DO NOT EDIT

#[cfg(feature = "v0_5_2")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
use crate::{Progress,Results};
use glib::{prelude::*};
#[cfg(feature = "v0_5_2")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
use glib::{translate::*};
#[cfg(feature = "v0_5_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
use glib::{signal::{connect_raw, SignalHandlerId}};
#[cfg(feature = "v0_5_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PkClient")]
    pub struct Client(Object<ffi::PkClient, ffi::PkClientClass>);

    match fn {
        type_ => || ffi::pk_client_get_type(),
    }
}

impl Client {
        pub const NONE: Option<&'static Client> = None;
    

    /// [`Client`][crate::Client] is a nice GObject wrapper for PackageKit and makes writing
    /// frontends easy.
    ///
    /// # Returns
    ///
    /// A new [`Client`][crate::Client] instance
    #[cfg(feature = "v0_5_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    #[doc(alias = "pk_client_new")]
    pub fn new() -> Client {
        unsafe {
            from_glib_full(ffi::pk_client_new())
        }
    }
}

#[cfg(feature = "v0_5_2")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
impl Default for Client {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Client>> Sealed for T {}
}

/// Trait containing all [`struct@Client`] methods.
///
/// # Implementors
///
/// [`Client`][struct@crate::Client], [`Task`][struct@crate::Task]
pub trait ClientExt: IsA<Client> + sealed::Sealed + 'static {
    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_accept_eula")]
    //fn accept_eula(&self, eula_id: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_accept_eula() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_accept_eula_async")]
    //fn accept_eula_async(&self, eula_id: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_accept_eula_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn accept_eula_future(&self, eula_id: &str, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let eula_id = String::from(eula_id);
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.accept_eula_async(
        //        &eula_id,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_adopt")]
    //fn adopt(&self, transaction_id: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_adopt() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_adopt_async")]
    //fn adopt_async(&self, transaction_id: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_adopt_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn adopt_future(&self, transaction_id: &str, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let transaction_id = String::from(transaction_id);
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.adopt_async(
        //        &transaction_id,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_depends_on")]
    //fn depends_on(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_depends_on() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_depends_on_async")]
    //fn depends_on_async(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_depends_on_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn depends_on_future(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let package_ids = package_ids.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.depends_on_async(
        //        filters,
        //        &package_ids,
        //        recursive,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_download_packages")]
    //fn download_packages(&self, package_ids: &[&str], directory: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_download_packages() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_download_packages_async")]
    //fn download_packages_async(&self, package_ids: &[&str], directory: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_download_packages_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn download_packages_future(&self, package_ids: &[&str], directory: &str, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let package_ids = package_ids.clone();
        //let directory = String::from(directory);
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.download_packages_async(
        //        &package_ids,
        //        &directory,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    /// Gets the background value.
    ///
    /// # Returns
    ///
    /// The background status.
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_client_get_background")]
    #[doc(alias = "get_background")]
    fn is_background(&self) -> bool {
        unsafe {
            from_glib(ffi::pk_client_get_background(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the maximum cache age value.
    ///
    /// # Returns
    ///
    /// The cache age in seconds
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_client_get_cache_age")]
    #[doc(alias = "get_cache_age")]
    fn cache_age(&self) -> u32 {
        unsafe {
            ffi::pk_client_get_cache_age(self.as_ref().to_glib_none().0)
        }
    }

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_get_categories")]
    //#[doc(alias = "get_categories")]
    //fn categories(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_get_categories() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_categories_async")]
    //#[doc(alias = "get_categories_async")]
    //fn categories_async(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_categories_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn categories_future(&self, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.categories_async(
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_get_details")]
    //#[doc(alias = "get_details")]
    //fn details(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_get_details() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_details_async")]
    //#[doc(alias = "get_details_async")]
    //fn details_async(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_details_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn details_future(&self, package_ids: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let package_ids = package_ids.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.details_async(
        //        &package_ids,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_8_17")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_17")))]
    //#[doc(alias = "pk_client_get_details_local")]
    //#[doc(alias = "get_details_local")]
    //fn details_local(&self, files: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_get_details_local() }
    //}

    //#[cfg(feature = "v0_8_17")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_17")))]
    //#[doc(alias = "pk_client_get_details_local_async")]
    //#[doc(alias = "get_details_local_async")]
    //fn details_local_async(&self, files: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_details_local_async() }
    //}

    //
    //#[cfg(feature = "v0_8_17")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_17")))]
    //fn details_local_future(&self, files: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let files = files.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.details_local_async(
        //        &files,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_get_distro_upgrades")]
    //#[doc(alias = "get_distro_upgrades")]
    //fn distro_upgrades(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_get_distro_upgrades() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_distro_upgrades_async")]
    //#[doc(alias = "get_distro_upgrades_async")]
    //fn distro_upgrades_async(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_distro_upgrades_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn distro_upgrades_future(&self, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.distro_upgrades_async(
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_get_files")]
    //#[doc(alias = "get_files")]
    //fn files(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_get_files() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_files_async")]
    //#[doc(alias = "get_files_async")]
    //fn files_async(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_files_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn files_future(&self, package_ids: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let package_ids = package_ids.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.files_async(
        //        &package_ids,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_9_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_9_1")))]
    //#[doc(alias = "pk_client_get_files_local")]
    //#[doc(alias = "get_files_local")]
    //fn files_local(&self, files: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_get_files_local() }
    //}

    //#[cfg(feature = "v0_9_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_9_1")))]
    //#[doc(alias = "pk_client_get_files_local_async")]
    //#[doc(alias = "get_files_local_async")]
    //fn files_local_async(&self, files: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_files_local_async() }
    //}

    //
    //#[cfg(feature = "v0_9_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_9_1")))]
    //fn files_local_future(&self, files: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let files = files.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.files_local_async(
        //        &files,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    /// Gets if the transaction client idle value.
    ///
    /// # Returns
    ///
    /// if this client is idle.
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_client_get_idle")]
    #[doc(alias = "get_idle")]
    fn is_idle(&self) -> bool {
        unsafe {
            from_glib(ffi::pk_client_get_idle(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the client interactive value.
    ///
    /// # Returns
    ///
    /// if the transaction is due to run interactivly.
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_client_get_interactive")]
    #[doc(alias = "get_interactive")]
    fn is_interactive(&self) -> bool {
        unsafe {
            from_glib(ffi::pk_client_get_interactive(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the locale used for this transaction.
    ///
    /// # Returns
    ///
    /// The locale.
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_client_get_locale")]
    #[doc(alias = "get_locale")]
    fn locale(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_client_get_locale(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_get_old_transactions")]
    //#[doc(alias = "get_old_transactions")]
    //fn old_transactions(&self, number: u32, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_get_old_transactions() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_old_transactions_async")]
    //#[doc(alias = "get_old_transactions_async")]
    //fn old_transactions_async(&self, number: u32, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_old_transactions_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn old_transactions_future(&self, number: u32, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.old_transactions_async(
        //        number,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_get_packages")]
    //#[doc(alias = "get_packages")]
    //fn packages(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_get_packages() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_packages_async")]
    //#[doc(alias = "get_packages_async")]
    //fn packages_async(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_packages_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn packages_future(&self, filters: Bitfield, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.packages_async(
        //        filters,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    /// Get the progress of a transaction.
    ///
    /// Warning: this function is synchronous, and will block. Do not use it in GUI
    /// applications.
    /// ## `transaction_id`
    /// The transaction id
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_client_get_progress")]
    #[doc(alias = "get_progress")]
    fn progress(&self, transaction_id: &str, cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<Progress, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_client_get_progress(self.as_ref().to_glib_none().0, transaction_id.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_progress_async")]
    //#[doc(alias = "get_progress_async")]
    //fn progress_async(&self, transaction_id: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_progress_async() }
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_get_repo_list")]
    //#[doc(alias = "get_repo_list")]
    //fn repo_list(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_get_repo_list() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_repo_list_async")]
    //#[doc(alias = "get_repo_list_async")]
    //fn repo_list_async(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_repo_list_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn repo_list_future(&self, filters: Bitfield, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.repo_list_async(
        //        filters,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_get_update_detail")]
    //#[doc(alias = "get_update_detail")]
    //fn update_detail(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_get_update_detail() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_update_detail_async")]
    //#[doc(alias = "get_update_detail_async")]
    //fn update_detail_async(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_update_detail_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn update_detail_future(&self, package_ids: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let package_ids = package_ids.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.update_detail_async(
        //        &package_ids,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_get_updates")]
    //#[doc(alias = "get_updates")]
    //fn updates(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_get_updates() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_get_updates_async")]
    //#[doc(alias = "get_updates_async")]
    //fn updates_async(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_get_updates_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn updates_future(&self, filters: Bitfield, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.updates_async(
        //        filters,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //#[doc(alias = "pk_client_install_files")]
    //fn install_files(&self, transaction_flags: Bitfield, files: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_install_files() }
    //}

    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //#[doc(alias = "pk_client_install_files_async")]
    //fn install_files_async(&self, transaction_flags: Bitfield, files: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_install_files_async() }
    //}

    //
    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //fn install_files_future(&self, transaction_flags: Bitfield, files: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let files = files.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.install_files_async(
        //        transaction_flags,
        //        &files,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //#[doc(alias = "pk_client_install_packages")]
    //fn install_packages(&self, transaction_flags: Bitfield, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_install_packages() }
    //}

    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //#[doc(alias = "pk_client_install_packages_async")]
    //fn install_packages_async(&self, transaction_flags: Bitfield, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_install_packages_async() }
    //}

    //
    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //fn install_packages_future(&self, transaction_flags: Bitfield, package_ids: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let package_ids = package_ids.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.install_packages_async(
        //        transaction_flags,
        //        &package_ids,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_install_signature")]
    //fn install_signature(&self, type_: SigTypeEnum, key_id: &str, package_id: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_install_signature() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_install_signature_async")]
    //fn install_signature_async(&self, type_: SigTypeEnum, key_id: &str, package_id: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_install_signature_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn install_signature_future(&self, type_: SigTypeEnum, key_id: &str, package_id: &str, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let key_id = String::from(key_id);
        //let package_id = String::from(package_id);
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.install_signature_async(
        //        type_,
        //        &key_id,
        //        &package_id,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_refresh_cache")]
    //fn refresh_cache(&self, force: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_refresh_cache() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_refresh_cache_async")]
    //fn refresh_cache_async(&self, force: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_refresh_cache_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn refresh_cache_future(&self, force: bool, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.refresh_cache_async(
        //        force,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //#[doc(alias = "pk_client_remove_packages")]
    //fn remove_packages(&self, transaction_flags: Bitfield, package_ids: &[&str], allow_deps: bool, autoremove: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_remove_packages() }
    //}

    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //#[doc(alias = "pk_client_remove_packages_async")]
    //fn remove_packages_async(&self, transaction_flags: Bitfield, package_ids: &[&str], allow_deps: bool, autoremove: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_remove_packages_async() }
    //}

    //
    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //fn remove_packages_future(&self, transaction_flags: Bitfield, package_ids: &[&str], allow_deps: bool, autoremove: bool, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let package_ids = package_ids.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.remove_packages_async(
        //        transaction_flags,
        //        &package_ids,
        //        allow_deps,
        //        autoremove,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //#[doc(alias = "pk_client_repair_system")]
    //fn repair_system(&self, transaction_flags: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_repair_system() }
    //}

    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //#[doc(alias = "pk_client_repair_system_async")]
    //fn repair_system_async(&self, transaction_flags: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_repair_system_async() }
    //}

    //
    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //fn repair_system_future(&self, transaction_flags: Bitfield, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.repair_system_async(
        //        transaction_flags,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_repo_enable")]
    //fn repo_enable(&self, repo_id: &str, enabled: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_repo_enable() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_repo_enable_async")]
    //fn repo_enable_async(&self, repo_id: &str, enabled: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_repo_enable_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn repo_enable_future(&self, repo_id: &str, enabled: bool, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let repo_id = String::from(repo_id);
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.repo_enable_async(
        //        &repo_id,
        //        enabled,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_9_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_9_1")))]
    //#[doc(alias = "pk_client_repo_remove")]
    //fn repo_remove(&self, transaction_flags: Bitfield, repo_id: &str, autoremove: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_repo_remove() }
    //}

    //#[cfg(feature = "v0_9_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_9_1")))]
    //#[doc(alias = "pk_client_repo_remove_async")]
    //fn repo_remove_async(&self, transaction_flags: Bitfield, repo_id: &str, autoremove: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_repo_remove_async() }
    //}

    //
    //#[cfg(feature = "v0_9_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_9_1")))]
    //fn repo_remove_future(&self, transaction_flags: Bitfield, repo_id: &str, autoremove: bool, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let repo_id = String::from(repo_id);
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.repo_remove_async(
        //        transaction_flags,
        //        &repo_id,
        //        autoremove,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_repo_set_data")]
    //fn repo_set_data(&self, repo_id: &str, parameter: &str, value: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_repo_set_data() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_repo_set_data_async")]
    //fn repo_set_data_async(&self, repo_id: &str, parameter: &str, value: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_repo_set_data_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn repo_set_data_future(&self, repo_id: &str, parameter: &str, value: &str, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let repo_id = String::from(repo_id);
        //let parameter = String::from(parameter);
        //let value = String::from(value);
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.repo_set_data_async(
        //        &repo_id,
        //        &parameter,
        //        &value,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_required_by")]
    //fn required_by(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_required_by() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_required_by_async")]
    //fn required_by_async(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_required_by_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn required_by_future(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let package_ids = package_ids.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.required_by_async(
        //        filters,
        //        &package_ids,
        //        recursive,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_resolve")]
    //fn resolve(&self, filters: Bitfield, packages: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_resolve() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_resolve_async")]
    //fn resolve_async(&self, filters: Bitfield, packages: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_resolve_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn resolve_future(&self, filters: Bitfield, packages: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let packages = packages.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.resolve_async(
        //        filters,
        //        &packages,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    //#[doc(alias = "pk_client_search_details")]
    //fn search_details(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_search_details() }
    //}

    //#[cfg(feature = "v0_5_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    //#[doc(alias = "pk_client_search_details_async")]
    //fn search_details_async(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_search_details_async() }
    //}

    //
    //#[cfg(feature = "v0_5_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    //fn search_details_future(&self, filters: Bitfield, values: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let values = values.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.search_details_async(
        //        filters,
        //        &values,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    //#[doc(alias = "pk_client_search_files")]
    //fn search_files(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_search_files() }
    //}

    //#[cfg(feature = "v0_5_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    //#[doc(alias = "pk_client_search_files_async")]
    //fn search_files_async(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_search_files_async() }
    //}

    //
    //#[cfg(feature = "v0_5_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    //fn search_files_future(&self, filters: Bitfield, values: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let values = values.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.search_files_async(
        //        filters,
        //        &values,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    //#[doc(alias = "pk_client_search_groups")]
    //fn search_groups(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_search_groups() }
    //}

    //#[cfg(feature = "v0_5_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    //#[doc(alias = "pk_client_search_groups_async")]
    //fn search_groups_async(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_search_groups_async() }
    //}

    //
    //#[cfg(feature = "v0_5_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    //fn search_groups_future(&self, filters: Bitfield, values: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let values = values.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.search_groups_async(
        //        filters,
        //        &values,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    //#[doc(alias = "pk_client_search_names")]
    //fn search_names(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_search_names() }
    //}

    //#[cfg(feature = "v0_5_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    //#[doc(alias = "pk_client_search_names_async")]
    //fn search_names_async(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_search_names_async() }
    //}

    //
    //#[cfg(feature = "v0_5_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    //fn search_names_future(&self, filters: Bitfield, values: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let values = values.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.search_names_async(
        //        filters,
        //        &values,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    /// Sets the background value for the client. A background transaction
    /// is usually scheduled at a lower priority and is usually given less
    /// network and disk performance.
    /// ## `background`
    /// if the transaction is a background transaction
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_client_set_background")]
    fn set_background(&self, background: bool) {
        unsafe {
            ffi::pk_client_set_background(self.as_ref().to_glib_none().0, background.into_glib());
        }
    }

    /// Sets the maximum cache age value for the client.
    /// ## `cache_age`
    /// the cache age to set, where `G_MAXUINT` means "never"
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_client_set_cache_age")]
    fn set_cache_age(&self, cache_age: u32) {
        unsafe {
            ffi::pk_client_set_cache_age(self.as_ref().to_glib_none().0, cache_age);
        }
    }

    /// Sets the interactive value for the client. Interactive transactions
    /// are usually allowed to ask the user questions.
    /// ## `interactive`
    /// the value to set
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_client_set_interactive")]
    fn set_interactive(&self, interactive: bool) {
        unsafe {
            ffi::pk_client_set_interactive(self.as_ref().to_glib_none().0, interactive.into_glib());
        }
    }

    /// Sets the locale to be used for the client. This may affect returned
    /// results.
    /// ## `locale`
    /// the locale to set, e.g. "en_GB.UTF-8"
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_client_set_locale")]
    fn set_locale(&self, locale: &str) {
        unsafe {
            ffi::pk_client_set_locale(self.as_ref().to_glib_none().0, locale.to_glib_none().0);
        }
    }

    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //#[doc(alias = "pk_client_update_packages")]
    //fn update_packages(&self, transaction_flags: Bitfield, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_update_packages() }
    //}

    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //#[doc(alias = "pk_client_update_packages_async")]
    //fn update_packages_async(&self, transaction_flags: Bitfield, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_update_packages_async() }
    //}

    //
    //#[cfg(feature = "v0_8_1")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    //fn update_packages_future(&self, transaction_flags: Bitfield, package_ids: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let package_ids = package_ids.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.update_packages_async(
        //        transaction_flags,
        //        &package_ids,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v1_0_10")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v1_0_10")))]
    //#[doc(alias = "pk_client_upgrade_system")]
    //fn upgrade_system(&self, transaction_flags: Bitfield, distro_id: &str, upgrade_kind: UpgradeKindEnum, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_upgrade_system() }
    //}

    //#[cfg(feature = "v1_0_10")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v1_0_10")))]
    //#[doc(alias = "pk_client_upgrade_system_async")]
    //fn upgrade_system_async(&self, transaction_flags: Bitfield, distro_id: &str, upgrade_kind: UpgradeKindEnum, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_upgrade_system_async() }
    //}

    //
    //#[cfg(feature = "v1_0_10")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v1_0_10")))]
    //fn upgrade_system_future(&self, transaction_flags: Bitfield, distro_id: &str, upgrade_kind: UpgradeKindEnum, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let distro_id = String::from(distro_id);
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.upgrade_system_async(
        //        transaction_flags,
        //        &distro_id,
        //        upgrade_kind,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_client_what_provides")]
    //fn what_provides(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_client_what_provides() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_client_what_provides_async")]
    //fn what_provides_async(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_client_what_provides_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn what_provides_future(&self, filters: Bitfield, values: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let values = values.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.what_provides_async(
        //        filters,
        //        &values,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    fn get_property_background(&self) -> bool {
        ObjectExt::property(self.as_ref(), "background")
    }

    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    fn set_property_background(&self, background: bool) {
        ObjectExt::set_property(self.as_ref(),"background", background)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_idle(&self) -> bool {
        ObjectExt::property(self.as_ref(), "idle")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_interactive(&self) -> bool {
        ObjectExt::property(self.as_ref(), "interactive")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_property_interactive(&self, interactive: bool) {
        ObjectExt::set_property(self.as_ref(),"interactive", interactive)
    }

    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    fn get_property_locale(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "locale")
    }

    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    fn set_property_locale(&self, locale: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"locale", locale)
    }

    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "background")]
    fn connect_background_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_background_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::PkClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::background\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_background_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "cache-age")]
    fn connect_cache_age_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cache_age_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::PkClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cache-age\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_cache_age_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "idle")]
    fn connect_idle_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_idle_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::PkClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::idle\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_idle_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "interactive")]
    fn connect_interactive_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_interactive_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::PkClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::interactive\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_interactive_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "locale")]
    fn connect_locale_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_locale_trampoline<P: IsA<Client>, F: Fn(&P) + 'static>(this: *mut ffi::PkClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Client::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::locale\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_locale_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Client>> ClientExt for O {}
