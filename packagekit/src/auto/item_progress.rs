// Generated by gir (https://github.com/gtk-rs/gir @ 1c7a6b57a5fc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 21b29d0e0c1a)
// from packagekit-gir-files
// DO NOT EDIT

use crate::{Source,StatusEnum};
use glib::{prelude::*,translate::*};
#[cfg(feature = "v0_8_1")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
use glib::{signal::{connect_raw, SignalHandlerId}};
#[cfg(feature = "v0_8_1")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PkItemProgress")]
    pub struct ItemProgress(Object<ffi::PkItemProgress, ffi::PkItemProgressClass>) @extends Source;

    match fn {
        type_ => || ffi::pk_item_progress_get_type(),
    }
}

impl ItemProgress {
        pub const NONE: Option<&'static ItemProgress> = None;
    

    /// An object containing item inside a [`Progress`][crate::Progress].
    ///
    /// # Returns
    ///
    /// a new [`ItemProgress`][crate::ItemProgress] object.
    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "pk_item_progress_new")]
    pub fn new() -> ItemProgress {
        unsafe {
            from_glib_full(ffi::pk_item_progress_new())
        }
    }
}

#[cfg(feature = "v0_8_1")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
impl Default for ItemProgress {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::ItemProgress>> Sealed for T {}
}

/// Trait containing all [`struct@ItemProgress`] methods.
///
/// # Implementors
///
/// [`ItemProgress`][struct@crate::ItemProgress]
pub trait ItemProgressExt: IsA<ItemProgress> + sealed::Sealed + 'static {
    /// Get the package ID this item is working on.
    ///
    /// # Returns
    ///
    /// a package ID
    #[doc(alias = "pk_item_progress_get_package_id")]
    #[doc(alias = "get_package_id")]
    fn package_id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_item_progress_get_package_id(self.as_ref().to_glib_none().0))
        }
    }

    /// Get the percentage complete of this item.
    ///
    /// # Returns
    ///
    /// a progress percentage (0-100)
    #[doc(alias = "pk_item_progress_get_percentage")]
    #[doc(alias = "get_percentage")]
    fn percentage(&self) -> u32 {
        unsafe {
            ffi::pk_item_progress_get_percentage(self.as_ref().to_glib_none().0)
        }
    }

    /// Get the status of this item.
    ///
    /// # Returns
    ///
    /// a [`StatusEnum`][crate::StatusEnum]
    #[doc(alias = "pk_item_progress_get_status")]
    #[doc(alias = "get_status")]
    fn status(&self) -> StatusEnum {
        unsafe {
            from_glib(ffi::pk_item_progress_get_status(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "package-id")]
    fn set_package_id(&self, package_id: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"package-id", package_id)
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    fn set_percentage(&self, percentage: u32) {
        ObjectExt::set_property(self.as_ref(),"percentage", percentage)
    }

    #[cfg(feature = "v0_8_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_2")))]
    fn set_status(&self, status: u32) {
        ObjectExt::set_property(self.as_ref(),"status", status)
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "package-id")]
    fn connect_package_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_package_id_trampoline<P: IsA<ItemProgress>, F: Fn(&P) + 'static>(this: *mut ffi::PkItemProgress, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(ItemProgress::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::package-id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_package_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "percentage")]
    fn connect_percentage_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_percentage_trampoline<P: IsA<ItemProgress>, F: Fn(&P) + 'static>(this: *mut ffi::PkItemProgress, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(ItemProgress::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::percentage\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_percentage_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_8_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_2")))]
    #[doc(alias = "status")]
    fn connect_status_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_status_trampoline<P: IsA<ItemProgress>, F: Fn(&P) + 'static>(this: *mut ffi::PkItemProgress, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(ItemProgress::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::status\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_status_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<ItemProgress>> ItemProgressExt for O {}
