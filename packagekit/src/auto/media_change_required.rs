// Generated by gir (https://github.com/gtk-rs/gir @ 1c7a6b57a5fc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 21b29d0e0c1a)
// from packagekit-gir-files
// DO NOT EDIT

use crate::{Source};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use crate::{MediaTypeEnum};
use glib::{prelude::*};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use glib::{signal::{connect_raw, SignalHandlerId},translate::*};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PkMediaChangeRequired")]
    pub struct MediaChangeRequired(Object<ffi::PkMediaChangeRequired, ffi::PkMediaChangeRequiredClass>) @extends Source;

    match fn {
        type_ => || ffi::pk_media_change_required_get_type(),
    }
}

impl MediaChangeRequired {
        pub const NONE: Option<&'static MediaChangeRequired> = None;
    

    ///
    /// # Returns
    ///
    /// a new [`MediaChangeRequired`][crate::MediaChangeRequired] object.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "pk_media_change_required_new")]
    pub fn new() -> MediaChangeRequired {
        unsafe {
            from_glib_full(ffi::pk_media_change_required_new())
        }
    }
}

#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
impl Default for MediaChangeRequired {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::MediaChangeRequired>> Sealed for T {}
}

/// Trait containing all [`struct@MediaChangeRequired`] methods.
///
/// # Implementors
///
/// [`MediaChangeRequired`][struct@crate::MediaChangeRequired]
pub trait MediaChangeRequiredExt: IsA<MediaChangeRequired> + sealed::Sealed + 'static {
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "media-id")]
    fn media_id(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "media-id")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "media-id")]
    fn set_media_id(&self, media_id: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"media-id", media_id)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "media-text")]
    fn media_text(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "media-text")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "media-text")]
    fn set_media_text(&self, media_text: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"media-text", media_text)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "media-type")]
    fn media_type(&self) -> MediaTypeEnum {
        ObjectExt::property(self.as_ref(), "media-type")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "media-type")]
    fn set_media_type(&self, media_type: MediaTypeEnum) {
        ObjectExt::set_property(self.as_ref(),"media-type", media_type)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "media-id")]
    fn connect_media_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_media_id_trampoline<P: IsA<MediaChangeRequired>, F: Fn(&P) + 'static>(this: *mut ffi::PkMediaChangeRequired, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MediaChangeRequired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::media-id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_media_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "media-text")]
    fn connect_media_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_media_text_trampoline<P: IsA<MediaChangeRequired>, F: Fn(&P) + 'static>(this: *mut ffi::PkMediaChangeRequired, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MediaChangeRequired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::media-text\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_media_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "media-type")]
    fn connect_media_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_media_type_trampoline<P: IsA<MediaChangeRequired>, F: Fn(&P) + 'static>(this: *mut ffi::PkMediaChangeRequired, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MediaChangeRequired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::media-type\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_media_type_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<MediaChangeRequired>> MediaChangeRequiredExt for O {}
