// Generated by gir (https://github.com/gtk-rs/gir @ 1c7a6b57a5fc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 21b29d0e0c1a)
// from packagekit-gir-files
// DO NOT EDIT

use crate::{Source};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use crate::{GroupEnum,InfoEnum,RestartEnum,UpdateStateEnum};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PkPackage")]
    pub struct Package(Object<ffi::PkPackage, ffi::PkPackageClass>) @extends Source;

    match fn {
        type_ => || ffi::pk_package_get_type(),
    }
}

impl Package {
        pub const NONE: Option<&'static Package> = None;
    

    ///
    /// # Returns
    ///
    /// a new [`Package`][crate::Package] object.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "pk_package_new")]
    pub fn new() -> Package {
        unsafe {
            from_glib_full(ffi::pk_package_new())
        }
    }

    /// Generate a PackageID.
    /// ## `name`
    /// the package name
    /// ## `version`
    /// the package version
    /// ## `arch`
    /// the package architecture
    /// ## `data`
    /// the package extra data
    ///
    /// # Returns
    ///
    /// returns a string to form the PackageID.
    #[cfg(feature = "v0_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5")))]
    #[doc(alias = "pk_package_id_build")]
    pub fn id_build(name: &str, version: &str, arch: &str, data: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::pk_package_id_build(name.to_glib_none().0, version.to_glib_none().0, arch.to_glib_none().0, data.to_glib_none().0))
        }
    }

    /// Check if a Packageid is well formed.
    /// ## `package_id`
    /// the PackageID to check
    ///
    /// # Returns
    ///
    /// [`true`] if the PackageID was well formed.
    #[cfg(feature = "v0_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5")))]
    #[doc(alias = "pk_package_id_check")]
    pub fn id_check(package_id: &str) -> bool {
        unsafe {
            from_glib(ffi::pk_package_id_check(package_id.to_glib_none().0))
        }
    }

    /// Only compare the name, version, and arch, where the architecture will fuzzy
    /// match with i*86.
    /// ## `package_id1`
    /// the first PackageID
    /// ## `package_id2`
    /// the second PackageID
    ///
    /// # Returns
    ///
    /// [`true`] if the PackageIDs can be considered equal.
    #[cfg(feature = "v0_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5")))]
    #[doc(alias = "pk_package_id_equal_fuzzy_arch")]
    pub fn id_equal_fuzzy_arch(package_id1: &str, package_id2: &str) -> bool {
        unsafe {
            from_glib(ffi::pk_package_id_equal_fuzzy_arch(package_id1.to_glib_none().0, package_id2.to_glib_none().0))
        }
    }

    /// Splits a PackageID into the correct number of parts, checking the correct
    /// number of delimiters are present.
    /// ## `package_id`
    /// the ; delimited PackageID to split
    ///
    /// # Returns
    ///
    /// a GStrv or [`None`] if invalid, use `g_strfreev()` to free
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_package_id_split")]
    pub fn id_split(package_id: &str) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::pk_package_id_split(package_id.to_glib_none().0))
        }
    }

    /// Formats the PackageID to be printable to the user.
    /// ## `package_id`
    /// the PackageID
    ///
    /// # Returns
    ///
    /// the name-version.arch formatted string, use `g_free()` to free.
    #[cfg(feature = "v0_5_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    #[doc(alias = "pk_package_id_to_printable")]
    pub fn id_to_printable(package_id: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::pk_package_id_to_printable(package_id.to_glib_none().0))
        }
    }

    /// Form a composite string array of package_id's from
    /// a single package_id
    /// ## `package_id`
    /// A single package_id
    ///
    /// # Returns
    ///
    /// the string array, or [`None`] if invalid, free with `g_strfreev()`
    #[cfg(feature = "v0_5_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    #[doc(alias = "pk_package_ids_from_id")]
    pub fn ids_from_id(package_id: &str) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::pk_package_ids_from_id(package_id.to_glib_none().0))
        }
    }

    /// Form a composite string array of package_id's from
    /// a delimited string
    /// ## `package_id`
    /// A single package_id
    ///
    /// # Returns
    ///
    /// the string array, or [`None`] if invalid, free with `g_strfreev()`
    #[cfg(feature = "v0_5_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    #[doc(alias = "pk_package_ids_from_string")]
    pub fn ids_from_string(package_id: &str) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::pk_package_ids_from_string(package_id.to_glib_none().0))
        }
    }
}

#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
impl Default for Package {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Package>> Sealed for T {}
}

/// Trait containing all [`struct@Package`] methods.
///
/// # Implementors
///
/// [`Package`][struct@crate::Package]
pub trait PackageExt: IsA<Package> + sealed::Sealed + 'static {
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "pk_package_equal")]
    fn equal(&self, package2: &impl IsA<Package>) -> bool {
        unsafe {
            from_glib(ffi::pk_package_equal(self.as_ref().to_glib_none().0, package2.as_ref().to_glib_none().0))
        }
    }

    /// Do the [`Package`][crate::Package]'s have the same ID.
    /// ## `package2`
    /// a valid [`Package`][crate::Package] instance
    ///
    /// # Returns
    ///
    /// [`true`] if the packages have the same package_id.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "pk_package_equal_id")]
    fn equal_id(&self, package2: &impl IsA<Package>) -> bool {
        unsafe {
            from_glib(ffi::pk_package_equal_id(self.as_ref().to_glib_none().0, package2.as_ref().to_glib_none().0))
        }
    }

    /// Gets the package arch.
    ///
    /// # Returns
    ///
    /// the arch, or [`None`] if unset
    #[cfg(feature = "v0_6_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_4")))]
    #[doc(alias = "pk_package_get_arch")]
    #[doc(alias = "get_arch")]
    fn arch(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_package_get_arch(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the package data, which is usually the repository ID that contains the
    /// package. Special ID's include "installed" for installed packages, and "local"
    /// for local packages that exist on disk but not in a repository.
    ///
    /// # Returns
    ///
    /// the data, or [`None`] if unset
    #[cfg(feature = "v0_6_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_4")))]
    #[doc(alias = "pk_package_get_data")]
    #[doc(alias = "get_data")]
    fn data(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_package_get_data(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the package object ID
    ///
    /// # Returns
    ///
    /// the ID, or [`None`] if unset
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "pk_package_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_package_get_id(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the package object ID
    ///
    /// # Returns
    ///
    /// the [`InfoEnum`][crate::InfoEnum]
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "pk_package_get_info")]
    #[doc(alias = "get_info")]
    fn info(&self) -> InfoEnum {
        unsafe {
            from_glib(ffi::pk_package_get_info(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the package name.
    ///
    /// # Returns
    ///
    /// the name, or [`None`] if unset
    #[cfg(feature = "v0_6_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_4")))]
    #[doc(alias = "pk_package_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_package_get_name(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the package object ID
    ///
    /// # Returns
    ///
    /// the summary, or [`None`] if unset
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "pk_package_get_summary")]
    #[doc(alias = "get_summary")]
    fn summary(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_package_get_summary(self.as_ref().to_glib_none().0))
        }
    }

    /// Returns the `self` update severity. Can be one of [`InfoEnum::Unknown`][crate::InfoEnum::Unknown],
    /// [`InfoEnum::Low`][crate::InfoEnum::Low], [`InfoEnum::Normal`][crate::InfoEnum::Normal], [`InfoEnum::Important`][crate::InfoEnum::Important] or
    /// [`InfoEnum::Critical`][crate::InfoEnum::Critical].
    ///
    /// # Returns
    ///
    /// the `self` update severity, if known.
    #[cfg(feature = "v1_2_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_2_4")))]
    #[doc(alias = "pk_package_get_update_severity")]
    #[doc(alias = "get_update_severity")]
    fn update_severity(&self) -> InfoEnum {
        unsafe {
            from_glib(ffi::pk_package_get_update_severity(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the package version.
    ///
    /// # Returns
    ///
    /// the version, or [`None`] if unset
    #[cfg(feature = "v0_6_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_4")))]
    #[doc(alias = "pk_package_get_version")]
    #[doc(alias = "get_version")]
    fn version(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_package_get_version(self.as_ref().to_glib_none().0))
        }
    }

    /// Parses the data to populate the [`Package`][crate::Package].
    /// ## `data`
    /// the data describing the package
    ///
    /// # Returns
    ///
    /// [`true`] if the data was parsed correcty
    #[cfg(feature = "v0_8_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_11")))]
    #[doc(alias = "pk_package_parse")]
    fn parse(&self, data: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::pk_package_parse(self.as_ref().to_glib_none().0, data.to_glib_none().0, &mut error);
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    /// Prints details about the package to standard out.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "pk_package_print")]
    fn print(&self) {
        unsafe {
            ffi::pk_package_print(self.as_ref().to_glib_none().0);
        }
    }

    /// Sets the package object to have the given ID
    /// ## `package_id`
    /// the valid package_id
    ///
    /// # Returns
    ///
    /// [`true`] if the package_id was set
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "pk_package_set_id")]
    fn set_id(&self, package_id: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::pk_package_set_id(self.as_ref().to_glib_none().0, package_id.to_glib_none().0, &mut error);
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    /// Sets the package info enum.
    /// ## `info`
    /// the [`InfoEnum`][crate::InfoEnum]
    #[cfg(feature = "v0_8_14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_14")))]
    #[doc(alias = "pk_package_set_info")]
    fn set_info(&self, info: InfoEnum) {
        unsafe {
            ffi::pk_package_set_info(self.as_ref().to_glib_none().0, info.into_glib());
        }
    }

    /// Sets the package summary.
    /// ## `summary`
    /// the package summary
    #[cfg(feature = "v0_8_14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_14")))]
    #[doc(alias = "pk_package_set_summary")]
    fn set_summary(&self, summary: &str) {
        unsafe {
            ffi::pk_package_set_summary(self.as_ref().to_glib_none().0, summary.to_glib_none().0);
        }
    }

    /// Set an update severity for the `self`. The `update_severity` can be
    /// one of [`InfoEnum::Unknown`][crate::InfoEnum::Unknown], [`InfoEnum::Low`][crate::InfoEnum::Low], [`InfoEnum::Normal`][crate::InfoEnum::Normal],
    /// [`InfoEnum::Important`][crate::InfoEnum::Important] or [`InfoEnum::Critical`][crate::InfoEnum::Critical].
    /// ## `update_severity`
    /// a [`InfoEnum`][crate::InfoEnum]
    #[cfg(feature = "v1_2_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_2_4")))]
    #[doc(alias = "pk_package_set_update_severity")]
    fn set_update_severity(&self, update_severity: InfoEnum) {
        unsafe {
            ffi::pk_package_set_update_severity(self.as_ref().to_glib_none().0, update_severity.into_glib());
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn description(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "description")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_description(&self, description: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"description", description)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn group(&self) -> GroupEnum {
        ObjectExt::property(self.as_ref(), "group")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_group(&self, group: GroupEnum) {
        ObjectExt::set_property(self.as_ref(),"group", group)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_property_info(&self, info: InfoEnum) {
        ObjectExt::set_property(self.as_ref(),"info", info)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn license(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "license")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_license(&self, license: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"license", license)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "package-id")]
    fn package_id(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "package-id")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn size(&self) -> u64 {
        ObjectExt::property(self.as_ref(), "size")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_size(&self, size: u64) {
        ObjectExt::set_property(self.as_ref(),"size", size)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_property_summary(&self, summary: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"summary", summary)
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "update-bugzilla-urls")]
    fn update_bugzilla_urls(&self) -> Vec<glib::GString> {
        ObjectExt::property(self.as_ref(), "update-bugzilla-urls")
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "update-bugzilla-urls")]
    fn set_update_bugzilla_urls(&self, update_bugzilla_urls: &[&str]) {
        ObjectExt::set_property(self.as_ref(),"update-bugzilla-urls", update_bugzilla_urls)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-changelog")]
    fn update_changelog(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "update-changelog")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-changelog")]
    fn set_update_changelog(&self, update_changelog: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"update-changelog", update_changelog)
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "update-cve-urls")]
    fn update_cve_urls(&self) -> Vec<glib::GString> {
        ObjectExt::property(self.as_ref(), "update-cve-urls")
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "update-cve-urls")]
    fn set_update_cve_urls(&self, update_cve_urls: &[&str]) {
        ObjectExt::set_property(self.as_ref(),"update-cve-urls", update_cve_urls)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-issued")]
    fn update_issued(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "update-issued")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-issued")]
    fn set_update_issued(&self, update_issued: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"update-issued", update_issued)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-obsoletes")]
    fn update_obsoletes(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "update-obsoletes")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-obsoletes")]
    fn set_update_obsoletes(&self, update_obsoletes: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"update-obsoletes", update_obsoletes)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-restart")]
    fn update_restart(&self) -> RestartEnum {
        ObjectExt::property(self.as_ref(), "update-restart")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-restart")]
    fn set_update_restart(&self, update_restart: RestartEnum) {
        ObjectExt::set_property(self.as_ref(),"update-restart", update_restart)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-state")]
    fn update_state(&self) -> UpdateStateEnum {
        ObjectExt::property(self.as_ref(), "update-state")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-state")]
    fn set_update_state(&self, update_state: UpdateStateEnum) {
        ObjectExt::set_property(self.as_ref(),"update-state", update_state)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-text")]
    fn update_text(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "update-text")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-text")]
    fn set_update_text(&self, update_text: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"update-text", update_text)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-updated")]
    fn update_updated(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "update-updated")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-updated")]
    fn set_update_updated(&self, update_updated: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"update-updated", update_updated)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-updates")]
    fn update_updates(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "update-updates")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-updates")]
    fn set_update_updates(&self, update_updates: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"update-updates", update_updates)
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "update-vendor-urls")]
    fn update_vendor_urls(&self) -> Vec<glib::GString> {
        ObjectExt::property(self.as_ref(), "update-vendor-urls")
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "update-vendor-urls")]
    fn set_update_vendor_urls(&self, update_vendor_urls: &[&str]) {
        ObjectExt::set_property(self.as_ref(),"update-vendor-urls", update_vendor_urls)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn url(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "url")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_url(&self, url: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"url", url)
    }

    /// The ::changed signal is emitted when the package data may have changed.
    #[doc(alias = "changed")]
    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"changed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "description")]
    fn connect_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_description_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::description\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_description_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "group")]
    fn connect_group_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_group_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::group\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_group_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "info")]
    fn connect_info_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_info_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::info\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_info_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "license")]
    fn connect_license_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_license_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::license\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_license_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "package-id")]
    fn connect_package_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_package_id_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::package-id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_package_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "size")]
    fn connect_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_size_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::size\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_size_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "summary")]
    fn connect_summary_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_summary_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::summary\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_summary_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "update-bugzilla-urls")]
    fn connect_update_bugzilla_urls_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_update_bugzilla_urls_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::update-bugzilla-urls\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_update_bugzilla_urls_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-changelog")]
    fn connect_update_changelog_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_update_changelog_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::update-changelog\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_update_changelog_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "update-cve-urls")]
    fn connect_update_cve_urls_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_update_cve_urls_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::update-cve-urls\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_update_cve_urls_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-issued")]
    fn connect_update_issued_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_update_issued_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::update-issued\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_update_issued_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-obsoletes")]
    fn connect_update_obsoletes_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_update_obsoletes_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::update-obsoletes\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_update_obsoletes_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-restart")]
    fn connect_update_restart_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_update_restart_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::update-restart\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_update_restart_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v1_2_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_2_4")))]
    #[doc(alias = "update-severity")]
    fn connect_update_severity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_update_severity_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::update-severity\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_update_severity_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-state")]
    fn connect_update_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_update_state_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::update-state\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_update_state_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-text")]
    fn connect_update_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_update_text_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::update-text\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_update_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-updated")]
    fn connect_update_updated_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_update_updated_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::update-updated\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_update_updated_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-updates")]
    fn connect_update_updates_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_update_updates_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::update-updates\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_update_updates_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "update-vendor-urls")]
    fn connect_update_vendor_urls_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_update_vendor_urls_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::update-vendor-urls\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_update_vendor_urls_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "url")]
    fn connect_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_url_trampoline<P: IsA<Package>, F: Fn(&P) + 'static>(this: *mut ffi::PkPackage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Package::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::url\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_url_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Package>> PackageExt for O {}
