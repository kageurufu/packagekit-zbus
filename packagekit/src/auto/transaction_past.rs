// Generated by gir (https://github.com/gtk-rs/gir @ 1c7a6b57a5fc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 21b29d0e0c1a)
// from packagekit-gir-files
// DO NOT EDIT

use crate::{Source};
#[cfg(feature = "v0_8_11")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_8_11")))]
use crate::{RoleEnum};
use glib::{prelude::*};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use glib::{signal::{connect_raw, SignalHandlerId},translate::*};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PkTransactionPast")]
    pub struct TransactionPast(Object<ffi::PkTransactionPast, ffi::PkTransactionPastClass>) @extends Source;

    match fn {
        type_ => || ffi::pk_transaction_past_get_type(),
    }
}

impl TransactionPast {
        pub const NONE: Option<&'static TransactionPast> = None;
    

    ///
    /// # Returns
    ///
    /// a new [`TransactionPast`][crate::TransactionPast] object.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "pk_transaction_past_new")]
    pub fn new() -> TransactionPast {
        unsafe {
            from_glib_full(ffi::pk_transaction_past_new())
        }
    }
}

#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
impl Default for TransactionPast {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::TransactionPast>> Sealed for T {}
}

/// Trait containing all [`struct@TransactionPast`] methods.
///
/// # Implementors
///
/// [`TransactionPast`][struct@crate::TransactionPast]
pub trait TransactionPastExt: IsA<TransactionPast> + sealed::Sealed + 'static {
    /// Gets the past transaction cmdline value;
    ///
    /// # Returns
    ///
    /// The transaction data
    #[cfg(feature = "v0_8_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_11")))]
    #[doc(alias = "pk_transaction_past_get_cmdline")]
    #[doc(alias = "get_cmdline")]
    fn cmdline(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_transaction_past_get_cmdline(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the past transaction data;
    ///
    /// # Returns
    ///
    /// The transaction data
    #[cfg(feature = "v0_8_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_11")))]
    #[doc(alias = "pk_transaction_past_get_data")]
    #[doc(alias = "get_data")]
    fn data(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_transaction_past_get_data(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the past transaction date & time value;
    ///
    /// # Returns
    ///
    /// The transaction data, or [`None`] if it's not available
    #[cfg(feature = "v0_8_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_11")))]
    #[doc(alias = "pk_transaction_past_get_datetime")]
    #[doc(alias = "get_datetime")]
    fn datetime(&self) -> Option<glib::DateTime> {
        unsafe {
            from_glib_full(ffi::pk_transaction_past_get_datetime(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the past transaction duration;
    ///
    /// # Returns
    ///
    /// The transaction duration in ms
    #[cfg(feature = "v0_8_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_11")))]
    #[doc(alias = "pk_transaction_past_get_duration")]
    #[doc(alias = "get_duration")]
    fn duration(&self) -> u32 {
        unsafe {
            ffi::pk_transaction_past_get_duration(self.as_ref().to_glib_none().0)
        }
    }

    /// Gets the past transaction ID value;
    ///
    /// # Returns
    ///
    /// The transaction data
    #[cfg(feature = "v0_8_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_11")))]
    #[doc(alias = "pk_transaction_past_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_transaction_past_get_id(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the past transaction role;
    ///
    /// # Returns
    ///
    /// The transaction data
    #[cfg(feature = "v0_8_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_11")))]
    #[doc(alias = "pk_transaction_past_get_role")]
    #[doc(alias = "get_role")]
    fn role(&self) -> RoleEnum {
        unsafe {
            from_glib(ffi::pk_transaction_past_get_role(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the past transaction succeeded value;
    ///
    /// # Returns
    ///
    /// The transaction data
    #[cfg(feature = "v0_8_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_11")))]
    #[doc(alias = "pk_transaction_past_get_succeeded")]
    #[doc(alias = "get_succeeded")]
    fn is_succeeded(&self) -> bool {
        unsafe {
            from_glib(ffi::pk_transaction_past_get_succeeded(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the past transaction timespec value;
    ///
    /// # Returns
    ///
    /// The transaction data
    #[cfg(feature = "v0_8_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_11")))]
    #[doc(alias = "pk_transaction_past_get_timespec")]
    #[doc(alias = "get_timespec")]
    fn timespec(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_transaction_past_get_timespec(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the past transaction timestamp
    ///
    /// # Returns
    ///
    /// The transaction data, or 0 if it's not available
    #[cfg(feature = "v0_8_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_11")))]
    #[doc(alias = "pk_transaction_past_get_timestamp")]
    #[doc(alias = "get_timestamp")]
    fn timestamp(&self) -> i64 {
        unsafe {
            ffi::pk_transaction_past_get_timestamp(self.as_ref().to_glib_none().0)
        }
    }

    /// Gets the past transaction uid;
    ///
    /// # Returns
    ///
    /// The transaction data
    #[cfg(feature = "v0_8_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_11")))]
    #[doc(alias = "pk_transaction_past_get_uid")]
    #[doc(alias = "get_uid")]
    fn uid(&self) -> u32 {
        unsafe {
            ffi::pk_transaction_past_get_uid(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_cmdline(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "cmdline")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_cmdline(&self, cmdline: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"cmdline", cmdline)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_data(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "data")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_data(&self, data: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"data", data)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_duration(&self) -> u32 {
        ObjectExt::property(self.as_ref(), "duration")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_duration(&self, duration: u32) {
        ObjectExt::set_property(self.as_ref(),"duration", duration)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_succeeded(&self) -> bool {
        ObjectExt::property(self.as_ref(), "succeeded")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_succeeded(&self, succeeded: bool) {
        ObjectExt::set_property(self.as_ref(),"succeeded", succeeded)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn tid(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "tid")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_tid(&self, tid: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"tid", tid)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_timespec(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "timespec")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_timespec(&self, timespec: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"timespec", timespec)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_uid(&self) -> u32 {
        ObjectExt::property(self.as_ref(), "uid")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_uid(&self, uid: u32) {
        ObjectExt::set_property(self.as_ref(),"uid", uid)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "cmdline")]
    fn connect_cmdline_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cmdline_trampoline<P: IsA<TransactionPast>, F: Fn(&P) + 'static>(this: *mut ffi::PkTransactionPast, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TransactionPast::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cmdline\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_cmdline_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "data")]
    fn connect_data_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_data_trampoline<P: IsA<TransactionPast>, F: Fn(&P) + 'static>(this: *mut ffi::PkTransactionPast, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TransactionPast::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::data\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_data_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "duration")]
    fn connect_duration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_duration_trampoline<P: IsA<TransactionPast>, F: Fn(&P) + 'static>(this: *mut ffi::PkTransactionPast, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TransactionPast::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::duration\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_duration_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "succeeded")]
    fn connect_succeeded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_succeeded_trampoline<P: IsA<TransactionPast>, F: Fn(&P) + 'static>(this: *mut ffi::PkTransactionPast, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TransactionPast::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::succeeded\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_succeeded_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "tid")]
    fn connect_tid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tid_trampoline<P: IsA<TransactionPast>, F: Fn(&P) + 'static>(this: *mut ffi::PkTransactionPast, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TransactionPast::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::tid\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_tid_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "timespec")]
    fn connect_timespec_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_timespec_trampoline<P: IsA<TransactionPast>, F: Fn(&P) + 'static>(this: *mut ffi::PkTransactionPast, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TransactionPast::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::timespec\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_timespec_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "uid")]
    fn connect_uid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_uid_trampoline<P: IsA<TransactionPast>, F: Fn(&P) + 'static>(this: *mut ffi::PkTransactionPast, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TransactionPast::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::uid\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_uid_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<TransactionPast>> TransactionPastExt for O {}
