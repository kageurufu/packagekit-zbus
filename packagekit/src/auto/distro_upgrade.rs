// Generated by gir (https://github.com/gtk-rs/gir @ 1c7a6b57a5fc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 21b29d0e0c1a)
// from packagekit-gir-files
// DO NOT EDIT

use crate::{Source};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use crate::{DistroUpgradeEnum};
use glib::{prelude::*};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use glib::{signal::{connect_raw, SignalHandlerId},translate::*};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PkDistroUpgrade")]
    pub struct DistroUpgrade(Object<ffi::PkDistroUpgrade, ffi::PkDistroUpgradeClass>) @extends Source;

    match fn {
        type_ => || ffi::pk_distro_upgrade_get_type(),
    }
}

impl DistroUpgrade {
        pub const NONE: Option<&'static DistroUpgrade> = None;
    

    ///
    /// # Returns
    ///
    /// a new [`DistroUpgrade`][crate::DistroUpgrade] object.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "pk_distro_upgrade_new")]
    pub fn new() -> DistroUpgrade {
        unsafe {
            from_glib_full(ffi::pk_distro_upgrade_new())
        }
    }
}

#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
impl Default for DistroUpgrade {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::DistroUpgrade>> Sealed for T {}
}

/// Trait containing all [`struct@DistroUpgrade`] methods.
///
/// # Implementors
///
/// [`DistroUpgrade`][struct@crate::DistroUpgrade]
pub trait DistroUpgradeExt: IsA<DistroUpgrade> + sealed::Sealed + 'static {
    /// Gets the distribution identifier.
    /// You use this value to call UpgradeSystem.
    ///
    /// # Returns
    ///
    /// the distro-id, e.g. "fedora-14"
    #[cfg(feature = "v0_6_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_11")))]
    #[doc(alias = "pk_distro_upgrade_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_distro_upgrade_get_id(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the status of the distribution upgrade.
    ///
    /// # Returns
    ///
    /// the printable name, e.g. [`DistroUpgradeEnum::Unstable`][crate::DistroUpgradeEnum::Unstable]
    #[cfg(feature = "v0_6_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_11")))]
    #[doc(alias = "pk_distro_upgrade_get_state")]
    #[doc(alias = "get_state")]
    fn state(&self) -> DistroUpgradeEnum {
        unsafe {
            from_glib(ffi::pk_distro_upgrade_get_state(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the description of the distribution upgrade.
    ///
    /// # Returns
    ///
    /// the printable name, e.g. "Fedora 14"
    #[cfg(feature = "v0_6_11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_11")))]
    #[doc(alias = "pk_distro_upgrade_get_summary")]
    #[doc(alias = "get_summary")]
    fn summary(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_distro_upgrade_get_summary(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn name(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "name")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_name(&self, name: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"name", name)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_state(&self) -> DistroUpgradeEnum {
        ObjectExt::property(self.as_ref(), "state")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_state(&self, state: DistroUpgradeEnum) {
        ObjectExt::set_property(self.as_ref(),"state", state)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_summary(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "summary")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_summary(&self, summary: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"summary", summary)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "name")]
    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P: IsA<DistroUpgrade>, F: Fn(&P) + 'static>(this: *mut ffi::PkDistroUpgrade, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DistroUpgrade::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "state")]
    fn connect_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_state_trampoline<P: IsA<DistroUpgrade>, F: Fn(&P) + 'static>(this: *mut ffi::PkDistroUpgrade, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DistroUpgrade::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::state\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_state_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "summary")]
    fn connect_summary_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_summary_trampoline<P: IsA<DistroUpgrade>, F: Fn(&P) + 'static>(this: *mut ffi::PkDistroUpgrade, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(DistroUpgrade::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::summary\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_summary_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<DistroUpgrade>> DistroUpgradeExt for O {}
