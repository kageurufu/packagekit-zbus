// Generated by gir (https://github.com/gtk-rs/gir @ 1c7a6b57a5fc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 21b29d0e0c1a)
// from packagekit-gir-files
// DO NOT EDIT

use crate::{Source};
use glib::{prelude::*};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use glib::{signal::{connect_raw, SignalHandlerId},translate::*};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PkCategory")]
    pub struct Category(Object<ffi::PkCategory, ffi::PkCategoryClass>) @extends Source;

    match fn {
        type_ => || ffi::pk_category_get_type(),
    }
}

impl Category {
        pub const NONE: Option<&'static Category> = None;
    

    ///
    /// # Returns
    ///
    /// a new [`Category`][crate::Category] object.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "pk_category_new")]
    pub fn new() -> Category {
        unsafe {
            from_glib_full(ffi::pk_category_new())
        }
    }
}

#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
impl Default for Category {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Category>> Sealed for T {}
}

/// Trait containing all [`struct@Category`] methods.
///
/// # Implementors
///
/// [`Category`][struct@crate::Category]
pub trait CategoryExt: IsA<Category> + sealed::Sealed + 'static {
    /// Gets the icon filename.
    ///
    /// # Returns
    ///
    /// the string value, or [`None`] for unset.
    #[cfg(feature = "v0_6_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_2")))]
    #[doc(alias = "pk_category_get_icon")]
    #[doc(alias = "get_icon")]
    fn icon(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_category_get_icon(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the id specific to this category.
    ///
    /// # Returns
    ///
    /// the string value, or [`None`] for unset.
    #[cfg(feature = "v0_6_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_2")))]
    #[doc(alias = "pk_category_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_category_get_id(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the name.
    ///
    /// # Returns
    ///
    /// the string value, or [`None`] for unset.
    #[cfg(feature = "v0_6_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_2")))]
    #[doc(alias = "pk_category_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_category_get_name(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the parent category id.
    ///
    /// # Returns
    ///
    /// the string value, or [`None`] for unset.
    #[cfg(feature = "v0_6_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_2")))]
    #[doc(alias = "pk_category_get_parent_id")]
    #[doc(alias = "get_parent_id")]
    fn parent_id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_category_get_parent_id(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the summary.
    ///
    /// # Returns
    ///
    /// the string value, or [`None`] for unset.
    #[cfg(feature = "v0_6_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_2")))]
    #[doc(alias = "pk_category_get_summary")]
    #[doc(alias = "get_summary")]
    fn summary(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_category_get_summary(self.as_ref().to_glib_none().0))
        }
    }

    /// Sets the icon filename.
    /// ## `icon`
    /// the new value
    #[cfg(feature = "v0_6_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_2")))]
    #[doc(alias = "pk_category_set_icon")]
    fn set_icon(&self, icon: &str) {
        unsafe {
            ffi::pk_category_set_icon(self.as_ref().to_glib_none().0, icon.to_glib_none().0);
        }
    }

    /// Sets the id specific to this category.
    /// ## `cat_id`
    /// the new value
    #[cfg(feature = "v0_6_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_2")))]
    #[doc(alias = "pk_category_set_id")]
    fn set_id(&self, cat_id: &str) {
        unsafe {
            ffi::pk_category_set_id(self.as_ref().to_glib_none().0, cat_id.to_glib_none().0);
        }
    }

    /// Sets the name.
    /// ## `name`
    /// the new value
    #[cfg(feature = "v0_6_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_2")))]
    #[doc(alias = "pk_category_set_name")]
    fn set_name(&self, name: &str) {
        unsafe {
            ffi::pk_category_set_name(self.as_ref().to_glib_none().0, name.to_glib_none().0);
        }
    }

    /// Sets the parent category id.
    /// ## `parent_id`
    /// the new value
    #[cfg(feature = "v0_6_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_2")))]
    #[doc(alias = "pk_category_set_parent_id")]
    fn set_parent_id(&self, parent_id: &str) {
        unsafe {
            ffi::pk_category_set_parent_id(self.as_ref().to_glib_none().0, parent_id.to_glib_none().0);
        }
    }

    /// Sets the summary.
    /// ## `summary`
    /// the new value
    #[cfg(feature = "v0_6_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_2")))]
    #[doc(alias = "pk_category_set_summary")]
    fn set_summary(&self, summary: &str) {
        unsafe {
            ffi::pk_category_set_summary(self.as_ref().to_glib_none().0, summary.to_glib_none().0);
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "cat-id")]
    fn cat_id(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "cat-id")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "cat-id")]
    fn set_cat_id(&self, cat_id: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"cat-id", cat_id)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_icon(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "icon")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_property_icon(&self, icon: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"icon", icon)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_name(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "name")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_property_name(&self, name: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"name", name)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "parent-id")]
    fn get_property_parent_id(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "parent-id")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "parent-id")]
    fn set_property_parent_id(&self, parent_id: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"parent-id", parent_id)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_summary(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "summary")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_property_summary(&self, summary: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"summary", summary)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "cat-id")]
    fn connect_cat_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cat_id_trampoline<P: IsA<Category>, F: Fn(&P) + 'static>(this: *mut ffi::PkCategory, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Category::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cat-id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_cat_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "icon")]
    fn connect_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_trampoline<P: IsA<Category>, F: Fn(&P) + 'static>(this: *mut ffi::PkCategory, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Category::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::icon\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_icon_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "name")]
    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P: IsA<Category>, F: Fn(&P) + 'static>(this: *mut ffi::PkCategory, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Category::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "parent-id")]
    fn connect_parent_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_parent_id_trampoline<P: IsA<Category>, F: Fn(&P) + 'static>(this: *mut ffi::PkCategory, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Category::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::parent-id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_parent_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "summary")]
    fn connect_summary_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_summary_trampoline<P: IsA<Category>, F: Fn(&P) + 'static>(this: *mut ffi::PkCategory, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Category::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::summary\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_summary_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Category>> CategoryExt for O {}
