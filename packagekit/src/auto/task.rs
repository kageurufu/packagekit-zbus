// Generated by gir (https://github.com/gtk-rs/gir @ 1c7a6b57a5fc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 21b29d0e0c1a)
// from packagekit-gir-files
// DO NOT EDIT

use crate::{Client};
#[cfg(feature = "v0_5_2")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
use crate::{Results};
#[cfg(feature = "v0_5_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
use crate::{Progress,ProgressType};
#[cfg(feature = "v0_6_5")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
use crate::{Bitfield};
#[cfg(feature = "v1_0_12")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_0_12")))]
use crate::{UpgradeKindEnum};
use glib::{prelude::*};
#[cfg(feature = "v0_5_2")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
use glib::{signal::{connect_raw, SignalHandlerId},translate::*};
#[cfg(feature = "v0_5_2")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PkTask")]
    pub struct Task(Object<ffi::PkTask, ffi::PkTaskClass>) @extends Client;

    match fn {
        type_ => || ffi::pk_task_get_type(),
    }
}

impl Task {
        pub const NONE: Option<&'static Task> = None;
    

    ///
    /// # Returns
    ///
    /// a new [`Task`][crate::Task] object.
    #[cfg(feature = "v0_5_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    #[doc(alias = "pk_task_new")]
    pub fn new() -> Task {
        unsafe {
            from_glib_full(ffi::pk_task_new())
        }
    }
}

#[cfg(feature = "v0_5_2")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
impl Default for Task {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Task>> Sealed for T {}
}

/// Trait containing all [`struct@Task`] methods.
///
/// # Implementors
///
/// [`Task`][struct@crate::Task]
pub trait TaskExt: IsA<Task> + sealed::Sealed + 'static {
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_depends_on_async")]
    //fn depends_on_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_depends_on_async() }
    //}

    /// Get the list of dependent packages.
    /// ## `filters`
    /// a bitfield of filters that can be used to limit the results
    /// ## `package_ids`
    /// a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"
    /// ## `recursive`
    /// if we should recurse to packages that depend on other packages
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_6_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    #[doc(alias = "pk_task_depends_on_sync")]
    fn depends_on_sync<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_depends_on_sync(self.as_ref().to_glib_none().0, filters, package_ids.to_glib_none().0, recursive.into_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_download_packages_async")]
    //fn download_packages_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, package_ids: &[&str], directory: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_download_packages_async() }
    //}

    /// Downloads packages
    /// ## `package_ids`
    /// a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"
    /// ## `directory`
    /// the destination directory
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_6_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    #[doc(alias = "pk_task_download_packages_sync")]
    fn download_packages_sync<P: FnMut(&Progress, &ProgressType)>(&self, package_ids: &[&str], directory: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_download_packages_sync(self.as_ref().to_glib_none().0, package_ids.to_glib_none().0, directory.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    /// Gets if we are allow packages to be downgraded.
    ///
    /// # Returns
    ///
    /// [`true`] if package downgrades are allowed
    #[cfg(feature = "v1_0_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_0_2")))]
    #[doc(alias = "pk_task_get_allow_downgrade")]
    #[doc(alias = "get_allow_downgrade")]
    fn allows_downgrade(&self) -> bool {
        unsafe {
            from_glib(ffi::pk_task_get_allow_downgrade(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets if we allow packages to be reinstalled.
    ///
    /// # Returns
    ///
    /// [`true`] if package reinstallation is allowed
    #[cfg(feature = "v1_0_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_0_2")))]
    #[doc(alias = "pk_task_get_allow_reinstall")]
    #[doc(alias = "get_allow_reinstall")]
    fn allows_reinstall(&self) -> bool {
        unsafe {
            from_glib(ffi::pk_task_get_allow_reinstall(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_get_categories_async")]
    //#[doc(alias = "get_categories_async")]
    //fn categories_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_get_categories_async() }
    //}

    /// Get the categories available.
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_6_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    #[doc(alias = "pk_task_get_categories_sync")]
    #[doc(alias = "get_categories_sync")]
    fn categories_sync<P: FnMut(&Progress, &ProgressType)>(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_get_categories_sync(self.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_get_details_async")]
    //#[doc(alias = "get_details_async")]
    //fn details_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_get_details_async() }
    //}

    /// Gets details about packages.
    /// ## `package_ids`
    /// a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_6_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    #[doc(alias = "pk_task_get_details_sync")]
    #[doc(alias = "get_details_sync")]
    fn details_sync<P: FnMut(&Progress, &ProgressType)>(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_get_details_sync(self.as_ref().to_glib_none().0, package_ids.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_get_files_async")]
    //#[doc(alias = "get_files_async")]
    //fn files_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_get_files_async() }
    //}

    /// Get the files in a package.
    /// ## `package_ids`
    /// a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_6_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    #[doc(alias = "pk_task_get_files_sync")]
    #[doc(alias = "get_files_sync")]
    fn files_sync<P: FnMut(&Progress, &ProgressType)>(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_get_files_sync(self.as_ref().to_glib_none().0, package_ids.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    /// Gets if we are just preparing the transaction for later.
    ///
    /// # Returns
    ///
    /// [`true`] if only downloading
    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "pk_task_get_only_download")]
    #[doc(alias = "get_only_download")]
    fn is_only_download(&self) -> bool {
        unsafe {
            from_glib(ffi::pk_task_get_only_download(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets if we allow only authenticated packages in the transactoin.
    ///
    /// # Returns
    ///
    /// [`true`] if we allow only authenticated packages
    #[cfg(feature = "v0_9_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_9_5")))]
    #[doc(alias = "pk_task_get_only_trusted")]
    #[doc(alias = "get_only_trusted")]
    fn is_only_trusted(&self) -> bool {
        unsafe {
            from_glib(ffi::pk_task_get_only_trusted(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_get_packages_async")]
    //#[doc(alias = "get_packages_async")]
    //fn packages_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_get_packages_async() }
    //}

    /// Gets the list of packages.
    /// ## `filters`
    /// a bitfield of filters that can be used to limit the results
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_6_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    #[doc(alias = "pk_task_get_packages_sync")]
    #[doc(alias = "get_packages_sync")]
    fn packages_sync<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_get_packages_sync(self.as_ref().to_glib_none().0, filters, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_get_repo_list_async")]
    //#[doc(alias = "get_repo_list_async")]
    //fn repo_list_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_get_repo_list_async() }
    //}

    /// Get the list of available repositories.
    /// ## `filters`
    /// a bitfield of filters that can be used to limit the results
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_6_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    #[doc(alias = "pk_task_get_repo_list_sync")]
    #[doc(alias = "get_repo_list_sync")]
    fn repo_list_sync<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_get_repo_list_sync(self.as_ref().to_glib_none().0, filters, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    /// Gets if we are simulating.
    ///
    /// # Returns
    ///
    /// [`true`] if we are simulating
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_task_get_simulate")]
    #[doc(alias = "get_simulate")]
    fn is_simulate(&self) -> bool {
        unsafe {
            from_glib(ffi::pk_task_get_simulate(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_get_update_detail_async")]
    //#[doc(alias = "get_update_detail_async")]
    //fn update_detail_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_get_update_detail_async() }
    //}

    /// Gets details about updates.
    /// ## `package_ids`
    /// a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_6_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    #[doc(alias = "pk_task_get_update_detail_sync")]
    #[doc(alias = "get_update_detail_sync")]
    fn update_detail_sync<P: FnMut(&Progress, &ProgressType)>(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_get_update_detail_sync(self.as_ref().to_glib_none().0, package_ids.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_get_updates_async")]
    //#[doc(alias = "get_updates_async")]
    //fn updates_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_get_updates_async() }
    //}

    /// Gets the update lists.
    /// ## `filters`
    /// a bitfield of filters that can be used to limit the results
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_6_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    #[doc(alias = "pk_task_get_updates_sync")]
    #[doc(alias = "get_updates_sync")]
    fn updates_sync<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_get_updates_sync(self.as_ref().to_glib_none().0, filters, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_task_install_files_async")]
    //fn install_files_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, files: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_install_files_async() }
    //}

    /// Install a file locally, and get the deps from the repositories.
    /// This is useful for double clicking on a .rpm or .deb file.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `files`
    /// a file such as "/home/hughsie/Desktop/hal-devel-0.10.0.rpm"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_task_install_files_sync")]
    fn install_files_sync<P: FnMut(&Progress, &ProgressType)>(&self, files: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_install_files_sync(self.as_ref().to_glib_none().0, files.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_task_install_packages_async")]
    //fn install_packages_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_install_packages_async() }
    //}

    /// Install a package of the newest and most correct version.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `package_ids`
    /// a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_task_install_packages_sync")]
    fn install_packages_sync<P: FnMut(&Progress, &ProgressType)>(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_install_packages_sync(self.as_ref().to_glib_none().0, package_ids.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_refresh_cache_async")]
    //fn refresh_cache_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, force: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_refresh_cache_async() }
    //}

    /// Refresh the package cache.
    /// ## `force`
    /// if the metadata should be deleted and re-downloaded even if it is correct
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_6_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    #[doc(alias = "pk_task_refresh_cache_sync")]
    fn refresh_cache_sync<P: FnMut(&Progress, &ProgressType)>(&self, force: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_refresh_cache_sync(self.as_ref().to_glib_none().0, force.into_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_task_remove_packages_async")]
    //fn remove_packages_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, package_ids: &[&str], allow_deps: bool, autoremove: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_remove_packages_async() }
    //}

    /// Remove a package (optionally with dependancies) from the system.
    /// If `allow_deps` is set to [`false`], and other packages would have to be removed,
    /// then the transaction would fail.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `package_ids`
    /// a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"
    /// ## `allow_deps`
    /// if other dependent packages are allowed to be removed from the computer
    /// ## `autoremove`
    /// if other packages installed at the same time should be tried to remove
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_task_remove_packages_sync")]
    fn remove_packages_sync<P: FnMut(&Progress, &ProgressType)>(&self, package_ids: &[&str], allow_deps: bool, autoremove: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_remove_packages_sync(self.as_ref().to_glib_none().0, package_ids.to_glib_none().0, allow_deps.into_glib(), autoremove.into_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_7_2")))]
    //#[doc(alias = "pk_task_repair_system_async")]
    //fn repair_system_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_repair_system_async() }
    //}

    /// Recover from broken dependencies of installed packages or incomplete
    /// installations.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_7_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_7_2")))]
    #[doc(alias = "pk_task_repair_system_sync")]
    fn repair_system_sync<P: FnMut(&Progress, &ProgressType)>(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_repair_system_sync(self.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_repo_enable_async")]
    //fn repo_enable_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, repo_id: &str, enabled: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_repo_enable_async() }
    //}

    /// Enable or disable a specific repo.
    /// ## `repo_id`
    /// The software repository ID
    /// ## `enabled`
    /// [`true`] or [`false`]
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_6_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    #[doc(alias = "pk_task_repo_enable_sync")]
    fn repo_enable_sync<P: FnMut(&Progress, &ProgressType)>(&self, repo_id: &str, enabled: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_repo_enable_sync(self.as_ref().to_glib_none().0, repo_id.to_glib_none().0, enabled.into_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_required_by_async")]
    //fn required_by_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_required_by_async() }
    //}

    /// Get the packages this package requires.
    /// ## `filters`
    /// a bitfield of filters that can be used to limit the results
    /// ## `package_ids`
    /// a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"
    /// ## `recursive`
    /// if we should return packages that depend on the ones we do
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_6_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    #[doc(alias = "pk_task_required_by_sync")]
    fn required_by_sync<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_required_by_sync(self.as_ref().to_glib_none().0, filters, package_ids.to_glib_none().0, recursive.into_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_resolve_async")]
    //fn resolve_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, packages: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_resolve_async() }
    //}

    /// Resolves a package name to a package-id.
    /// ## `filters`
    /// a bitfield of filters that can be used to limit the results
    /// ## `packages`
    /// package names to find
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_6_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    #[doc(alias = "pk_task_resolve_sync")]
    fn resolve_sync<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, packages: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_resolve_sync(self.as_ref().to_glib_none().0, filters, packages.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_5"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_5"))))]
    //#[doc(alias = "pk_task_search_details_async")]
    //fn search_details_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_search_details_async() }
    //}

    /// Searches for some package details.
    /// ## `filters`
    /// a bitfield of filters that can be used to limit the results
    /// ## `values`
    /// search values
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_6_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    #[doc(alias = "pk_task_search_details_sync")]
    fn search_details_sync<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_search_details_sync(self.as_ref().to_glib_none().0, filters, values.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_5"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_5"))))]
    //#[doc(alias = "pk_task_search_files_async")]
    //fn search_files_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_search_files_async() }
    //}

    /// Searches for specific files.
    /// ## `filters`
    /// a bitfield of filters that can be used to limit the results
    /// ## `values`
    /// search values
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_6_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    #[doc(alias = "pk_task_search_files_sync")]
    fn search_files_sync<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_search_files_sync(self.as_ref().to_glib_none().0, filters, values.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_5"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_5"))))]
    //#[doc(alias = "pk_task_search_groups_async")]
    //fn search_groups_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_search_groups_async() }
    //}

    /// Searches the group lists.
    /// ## `filters`
    /// a bitfield of filters that can be used to limit the results
    /// ## `values`
    /// search values
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_6_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    #[doc(alias = "pk_task_search_groups_sync")]
    fn search_groups_sync<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_search_groups_sync(self.as_ref().to_glib_none().0, filters, values.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_5"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_5"))))]
    //#[doc(alias = "pk_task_search_names_async")]
    //fn search_names_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_search_names_async() }
    //}

    /// Searches for a package name.
    /// ## `filters`
    /// a bitfield of filters that can be used to limit the results
    /// ## `values`
    /// search values
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_6_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    #[doc(alias = "pk_task_search_names_sync")]
    fn search_names_sync<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_search_names_sync(self.as_ref().to_glib_none().0, filters, values.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    /// If package downgrades shall be allowed during transaction.
    /// ## `allow_downgrade`
    /// [`true`] to allow packages to be downgraded.
    #[cfg(feature = "v1_0_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_0_2")))]
    #[doc(alias = "pk_task_set_allow_downgrade")]
    fn set_allow_downgrade(&self, allow_downgrade: bool) {
        unsafe {
            ffi::pk_task_set_allow_downgrade(self.as_ref().to_glib_none().0, allow_downgrade.into_glib());
        }
    }

    /// If package reinstallation shall be allowed during transaction.
    /// ## `allow_reinstall`
    /// [`true`] to allow packages to be reinstalled.
    #[cfg(feature = "v1_0_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_0_2")))]
    #[doc(alias = "pk_task_set_allow_reinstall")]
    fn set_allow_reinstall(&self, allow_reinstall: bool) {
        unsafe {
            ffi::pk_task_set_allow_reinstall(self.as_ref().to_glib_none().0, allow_reinstall.into_glib());
        }
    }

    /// If the transaction should be prepared (depsolved, packages
    /// downloaded, etc) but not committed.
    /// ## `only_download`
    /// [`false`] to actually commit the transaction
    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "pk_task_set_only_download")]
    fn set_only_download(&self, only_download: bool) {
        unsafe {
            ffi::pk_task_set_only_download(self.as_ref().to_glib_none().0, only_download.into_glib());
        }
    }

    /// If only authenticated packages should be allowed in the
    /// transaction.
    /// ## `only_trusted`
    /// [`true`] to allow only authenticated packages
    #[cfg(feature = "v0_9_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_9_5")))]
    #[doc(alias = "pk_task_set_only_trusted")]
    fn set_only_trusted(&self, only_trusted: bool) {
        unsafe {
            ffi::pk_task_set_only_trusted(self.as_ref().to_glib_none().0, only_trusted.into_glib());
        }
    }

    /// If the simulate step should be run without the actual transaction.
    /// ## `simulate`
    /// the simulate mode
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_task_set_simulate")]
    fn set_simulate(&self, simulate: bool) {
        unsafe {
            ffi::pk_task_set_simulate(self.as_ref().to_glib_none().0, simulate.into_glib());
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_task_update_packages_async")]
    //fn update_packages_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_update_packages_async() }
    //}

    /// Update specific packages to the newest available versions.
    ///
    /// Warning: this function is synchronous, and may block. Do not use it in GUI
    /// applications.
    /// ## `package_ids`
    /// a null terminated array of package_id structures such as "hal;0.0.1;i386;fedora"
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_5_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    #[doc(alias = "pk_task_update_packages_sync")]
    fn update_packages_sync<P: FnMut(&Progress, &ProgressType)>(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_update_packages_sync(self.as_ref().to_glib_none().0, package_ids.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v1_0_12")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v1_0_12")))]
    //#[doc(alias = "pk_task_upgrade_system_async")]
    //fn upgrade_system_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, distro_id: &str, upgrade_kind: UpgradeKindEnum, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_upgrade_system_async() }
    //}

    /// This transaction will update the distro to the next version, which may
    /// involve just downloading the installer and setting up the boot device,
    /// or may involve doing an on-line upgrade.
    ///
    /// The backend will decide what is best to do.
    /// ## `distro_id`
    /// a distro ID such as "fedora-14"
    /// ## `upgrade_kind`
    /// a [`UpgradeKindEnum`][crate::UpgradeKindEnum] such as [`UpgradeKindEnum::Complete`][crate::UpgradeKindEnum::Complete]
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v1_0_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_0_12")))]
    #[doc(alias = "pk_task_upgrade_system_sync")]
    fn upgrade_system_sync<P: FnMut(&Progress, &ProgressType)>(&self, distro_id: &str, upgrade_kind: UpgradeKindEnum, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_upgrade_system_sync(self.as_ref().to_glib_none().0, distro_id.to_glib_none().0, upgrade_kind.into_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    /// Mark a EULA as accepted by the user.
    /// ## `request`
    /// request ID for EULA.
    ///
    /// # Returns
    ///
    /// [`true`] if `request` is valid.
    #[cfg(feature = "v0_5_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    #[doc(alias = "pk_task_user_accepted")]
    fn user_accepted(&self, request: u32) -> bool {
        unsafe {
            from_glib(ffi::pk_task_user_accepted(self.as_ref().to_glib_none().0, request))
        }
    }

    /// Mark a EULA as declined by the user.
    /// ## `request`
    /// request ID for EULA.
    ///
    /// # Returns
    ///
    /// [`true`] if `request` is valid.
    #[cfg(feature = "v0_5_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    #[doc(alias = "pk_task_user_declined")]
    fn user_declined(&self, request: u32) -> bool {
        unsafe {
            from_glib(ffi::pk_task_user_declined(self.as_ref().to_glib_none().0, request))
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_what_provides_async")]
    //fn what_provides_async<P: Fn(&Progress, &ProgressType) + 'static>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P, callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_what_provides_async() }
    //}

    /// Find the package that provides some resource.
    /// ## `filters`
    /// a bitfield of filters that can be used to limit the results
    /// ## `values`
    /// values to search for
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable] or [`None`]
    /// ## `progress_callback`
    /// the function to run when the progress changes
    /// ## `progress_user_data`
    /// data to pass to `progress_callback`
    ///
    /// # Returns
    ///
    /// a [`Results`][crate::Results] object, or [`None`] for error
    #[cfg(feature = "v0_6_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    #[doc(alias = "pk_task_what_provides_sync")]
    fn what_provides_sync<P: FnMut(&Progress, &ProgressType)>(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: P) -> Result<Results, glib::Error> {
        let progress_callback_data: P = progress_callback;
        unsafe extern "C" fn progress_callback_func<P: FnMut(&Progress, &ProgressType)>(progress: *mut ffi::PkProgress, type_: ffi::PkProgressType, user_data: glib::ffi::gpointer) {
            let progress = from_glib_borrow(progress);
            let type_ = from_glib_borrow(type_);
            let callback = user_data as *mut P;
            (*callback)(&progress, &type_)
        }
        let progress_callback = Some(progress_callback_func::<P> as _);
        let super_callback0: &P = &progress_callback_data;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::pk_task_what_provides_sync(self.as_ref().to_glib_none().0, filters, values.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, progress_callback, super_callback0 as *const _ as *mut _, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    /// [`true`] if we are simulating.
    #[cfg(feature = "v0_5_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    fn get_property_simulate(&self) -> bool {
        ObjectExt::property(self.as_ref(), "simulate")
    }

    /// [`true`] if we are simulating.
    #[cfg(feature = "v0_5_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    fn set_property_simulate(&self, simulate: bool) {
        ObjectExt::set_property(self.as_ref(),"simulate", simulate)
    }

    #[cfg(feature = "v1_0_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_0_2")))]
    #[doc(alias = "allow-downgrade")]
    fn connect_allow_downgrade_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_allow_downgrade_trampoline<P: IsA<Task>, F: Fn(&P) + 'static>(this: *mut ffi::PkTask, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Task::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::allow-downgrade\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_allow_downgrade_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v1_0_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_0_2")))]
    #[doc(alias = "allow-reinstall")]
    fn connect_allow_reinstall_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_allow_reinstall_trampoline<P: IsA<Task>, F: Fn(&P) + 'static>(this: *mut ffi::PkTask, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Task::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::allow-reinstall\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_allow_reinstall_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "only-download")]
    fn connect_only_download_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_only_download_trampoline<P: IsA<Task>, F: Fn(&P) + 'static>(this: *mut ffi::PkTask, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Task::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::only-download\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_only_download_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_9_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_9_5")))]
    #[doc(alias = "only-trusted")]
    fn connect_only_trusted_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_only_trusted_trampoline<P: IsA<Task>, F: Fn(&P) + 'static>(this: *mut ffi::PkTask, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Task::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::only-trusted\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_only_trusted_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    #[doc(alias = "simulate")]
    fn connect_simulate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_simulate_trampoline<P: IsA<Task>, F: Fn(&P) + 'static>(this: *mut ffi::PkTask, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Task::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::simulate\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_simulate_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Task>> TaskExt for O {}
