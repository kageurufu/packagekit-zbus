// Generated by gir (https://github.com/gtk-rs/gir @ 1c7a6b57a5fc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 21b29d0e0c1a)
// from packagekit-gir-files
// DO NOT EDIT

use crate::{Client};
#[cfg(feature = "v0_5_2")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
use crate::{Results};
use glib::{prelude::*};
#[cfg(feature = "v0_5_2")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
use glib::{signal::{connect_raw, SignalHandlerId},translate::*};
#[cfg(feature = "v0_5_2")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PkTask")]
    pub struct Task(Object<ffi::PkTask, ffi::PkTaskClass>) @extends Client;

    match fn {
        type_ => || ffi::pk_task_get_type(),
    }
}

impl Task {
        pub const NONE: Option<&'static Task> = None;
    

    ///
    /// # Returns
    ///
    /// a new [`Task`][crate::Task] object.
    #[cfg(feature = "v0_5_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    #[doc(alias = "pk_task_new")]
    pub fn new() -> Task {
        unsafe {
            from_glib_full(ffi::pk_task_new())
        }
    }
}

#[cfg(feature = "v0_5_2")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
impl Default for Task {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Task>> Sealed for T {}
}

/// Trait containing all [`struct@Task`] methods.
///
/// # Implementors
///
/// [`Task`][struct@crate::Task]
pub trait TaskExt: IsA<Task> + sealed::Sealed + 'static {
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_depends_on_async")]
    //fn depends_on_async(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_depends_on_async() }
    //}

    //
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //fn depends_on_future(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let package_ids = package_ids.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.depends_on_async(
        //        filters,
        //        &package_ids,
        //        recursive,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[doc(alias = "pk_task_depends_on_sync")]
    //fn depends_on_sync(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_depends_on_sync() }
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_download_packages_async")]
    //fn download_packages_async(&self, package_ids: &[&str], directory: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_download_packages_async() }
    //}

    //
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //fn download_packages_future(&self, package_ids: &[&str], directory: &str, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let package_ids = package_ids.clone();
        //let directory = String::from(directory);
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.download_packages_async(
        //        &package_ids,
        //        &directory,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[doc(alias = "pk_task_download_packages_sync")]
    //fn download_packages_sync(&self, package_ids: &[&str], directory: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_download_packages_sync() }
    //}

    /// Gets if we are allow packages to be downgraded.
    ///
    /// # Returns
    ///
    /// [`true`] if package downgrades are allowed
    #[cfg(feature = "v1_0_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_0_2")))]
    #[doc(alias = "pk_task_get_allow_downgrade")]
    #[doc(alias = "get_allow_downgrade")]
    fn allows_downgrade(&self) -> bool {
        unsafe {
            from_glib(ffi::pk_task_get_allow_downgrade(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets if we allow packages to be reinstalled.
    ///
    /// # Returns
    ///
    /// [`true`] if package reinstallation is allowed
    #[cfg(feature = "v1_0_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_0_2")))]
    #[doc(alias = "pk_task_get_allow_reinstall")]
    #[doc(alias = "get_allow_reinstall")]
    fn allows_reinstall(&self) -> bool {
        unsafe {
            from_glib(ffi::pk_task_get_allow_reinstall(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_get_categories_async")]
    //#[doc(alias = "get_categories_async")]
    //fn categories_async(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_get_categories_async() }
    //}

    //
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //fn categories_future(&self, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.categories_async(
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[doc(alias = "pk_task_get_categories_sync")]
    //#[doc(alias = "get_categories_sync")]
    //fn categories_sync(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_get_categories_sync() }
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_get_details_async")]
    //#[doc(alias = "get_details_async")]
    //fn details_async(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_get_details_async() }
    //}

    //
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //fn details_future(&self, package_ids: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let package_ids = package_ids.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.details_async(
        //        &package_ids,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[doc(alias = "pk_task_get_details_sync")]
    //#[doc(alias = "get_details_sync")]
    //fn details_sync(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_get_details_sync() }
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_get_files_async")]
    //#[doc(alias = "get_files_async")]
    //fn files_async(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_get_files_async() }
    //}

    //
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //fn files_future(&self, package_ids: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let package_ids = package_ids.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.files_async(
        //        &package_ids,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[doc(alias = "pk_task_get_files_sync")]
    //#[doc(alias = "get_files_sync")]
    //fn files_sync(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_get_files_sync() }
    //}

    /// Gets if we are just preparing the transaction for later.
    ///
    /// # Returns
    ///
    /// [`true`] if only downloading
    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "pk_task_get_only_download")]
    #[doc(alias = "get_only_download")]
    fn is_only_download(&self) -> bool {
        unsafe {
            from_glib(ffi::pk_task_get_only_download(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets if we allow only authenticated packages in the transactoin.
    ///
    /// # Returns
    ///
    /// [`true`] if we allow only authenticated packages
    #[cfg(feature = "v0_9_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_9_5")))]
    #[doc(alias = "pk_task_get_only_trusted")]
    #[doc(alias = "get_only_trusted")]
    fn is_only_trusted(&self) -> bool {
        unsafe {
            from_glib(ffi::pk_task_get_only_trusted(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_get_packages_async")]
    //#[doc(alias = "get_packages_async")]
    //fn packages_async(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_get_packages_async() }
    //}

    //
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //fn packages_future(&self, filters: Bitfield, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.packages_async(
        //        filters,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[doc(alias = "pk_task_get_packages_sync")]
    //#[doc(alias = "get_packages_sync")]
    //fn packages_sync(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_get_packages_sync() }
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_get_repo_list_async")]
    //#[doc(alias = "get_repo_list_async")]
    //fn repo_list_async(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_get_repo_list_async() }
    //}

    //
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //fn repo_list_future(&self, filters: Bitfield, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.repo_list_async(
        //        filters,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[doc(alias = "pk_task_get_repo_list_sync")]
    //#[doc(alias = "get_repo_list_sync")]
    //fn repo_list_sync(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_get_repo_list_sync() }
    //}

    /// Gets if we are simulating.
    ///
    /// # Returns
    ///
    /// [`true`] if we are simulating
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_task_get_simulate")]
    #[doc(alias = "get_simulate")]
    fn is_simulate(&self) -> bool {
        unsafe {
            from_glib(ffi::pk_task_get_simulate(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_get_update_detail_async")]
    //#[doc(alias = "get_update_detail_async")]
    //fn update_detail_async(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_get_update_detail_async() }
    //}

    //
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //fn update_detail_future(&self, package_ids: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let package_ids = package_ids.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.update_detail_async(
        //        &package_ids,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[doc(alias = "pk_task_get_update_detail_sync")]
    //#[doc(alias = "get_update_detail_sync")]
    //fn update_detail_sync(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_get_update_detail_sync() }
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_get_updates_async")]
    //#[doc(alias = "get_updates_async")]
    //fn updates_async(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_get_updates_async() }
    //}

    //
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //fn updates_future(&self, filters: Bitfield, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.updates_async(
        //        filters,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[doc(alias = "pk_task_get_updates_sync")]
    //#[doc(alias = "get_updates_sync")]
    //fn updates_sync(&self, filters: Bitfield, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_get_updates_sync() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_task_install_files_async")]
    //fn install_files_async(&self, files: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_install_files_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn install_files_future(&self, files: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let files = files.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.install_files_async(
        //        &files,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_task_install_files_sync")]
    //fn install_files_sync(&self, files: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_install_files_sync() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_task_install_packages_async")]
    //fn install_packages_async(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_install_packages_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn install_packages_future(&self, package_ids: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let package_ids = package_ids.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.install_packages_async(
        //        &package_ids,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_task_install_packages_sync")]
    //fn install_packages_sync(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_install_packages_sync() }
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_refresh_cache_async")]
    //fn refresh_cache_async(&self, force: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_refresh_cache_async() }
    //}

    //
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //fn refresh_cache_future(&self, force: bool, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.refresh_cache_async(
        //        force,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[doc(alias = "pk_task_refresh_cache_sync")]
    //fn refresh_cache_sync(&self, force: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_refresh_cache_sync() }
    //}

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_task_remove_packages_async")]
    //fn remove_packages_async(&self, package_ids: &[&str], allow_deps: bool, autoremove: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_remove_packages_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn remove_packages_future(&self, package_ids: &[&str], allow_deps: bool, autoremove: bool, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let package_ids = package_ids.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.remove_packages_async(
        //        &package_ids,
        //        allow_deps,
        //        autoremove,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_task_remove_packages_sync")]
    //fn remove_packages_sync(&self, package_ids: &[&str], allow_deps: bool, autoremove: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_remove_packages_sync() }
    //}

    //#[cfg(feature = "v0_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_7_2")))]
    //#[doc(alias = "pk_task_repair_system_async")]
    //fn repair_system_async(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_repair_system_async() }
    //}

    //
    //#[cfg(feature = "v0_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_7_2")))]
    //fn repair_system_future(&self, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.repair_system_async(
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_7_2")))]
    //#[doc(alias = "pk_task_repair_system_sync")]
    //fn repair_system_sync(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_repair_system_sync() }
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_repo_enable_async")]
    //fn repo_enable_async(&self, repo_id: &str, enabled: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_repo_enable_async() }
    //}

    //
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //fn repo_enable_future(&self, repo_id: &str, enabled: bool, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let repo_id = String::from(repo_id);
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.repo_enable_async(
        //        &repo_id,
        //        enabled,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[doc(alias = "pk_task_repo_enable_sync")]
    //fn repo_enable_sync(&self, repo_id: &str, enabled: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_repo_enable_sync() }
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_required_by_async")]
    //fn required_by_async(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_required_by_async() }
    //}

    //
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //fn required_by_future(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let package_ids = package_ids.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.required_by_async(
        //        filters,
        //        &package_ids,
        //        recursive,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[doc(alias = "pk_task_required_by_sync")]
    //fn required_by_sync(&self, filters: Bitfield, package_ids: &[&str], recursive: bool, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_required_by_sync() }
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_resolve_async")]
    //fn resolve_async(&self, filters: Bitfield, packages: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_resolve_async() }
    //}

    //
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //fn resolve_future(&self, filters: Bitfield, packages: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let packages = packages.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.resolve_async(
        //        filters,
        //        &packages,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[doc(alias = "pk_task_resolve_sync")]
    //fn resolve_sync(&self, filters: Bitfield, packages: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_resolve_sync() }
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_5"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_5"))))]
    //#[doc(alias = "pk_task_search_details_async")]
    //fn search_details_async(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_search_details_async() }
    //}

    //
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_5"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_5"))))]
    //fn search_details_future(&self, filters: Bitfield, values: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let values = values.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.search_details_async(
        //        filters,
        //        &values,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[doc(alias = "pk_task_search_details_sync")]
    //fn search_details_sync(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_search_details_sync() }
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_5"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_5"))))]
    //#[doc(alias = "pk_task_search_files_async")]
    //fn search_files_async(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_search_files_async() }
    //}

    //
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_5"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_5"))))]
    //fn search_files_future(&self, filters: Bitfield, values: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let values = values.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.search_files_async(
        //        filters,
        //        &values,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[doc(alias = "pk_task_search_files_sync")]
    //fn search_files_sync(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_search_files_sync() }
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_5"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_5"))))]
    //#[doc(alias = "pk_task_search_groups_async")]
    //fn search_groups_async(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_search_groups_async() }
    //}

    //
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_5"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_5"))))]
    //fn search_groups_future(&self, filters: Bitfield, values: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let values = values.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.search_groups_async(
        //        filters,
        //        &values,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[doc(alias = "pk_task_search_groups_sync")]
    //fn search_groups_sync(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_search_groups_sync() }
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_5"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_5"))))]
    //#[doc(alias = "pk_task_search_names_async")]
    //fn search_names_async(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_search_names_async() }
    //}

    //
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_5"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_5"))))]
    //fn search_names_future(&self, filters: Bitfield, values: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let values = values.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.search_names_async(
        //        filters,
        //        &values,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[doc(alias = "pk_task_search_names_sync")]
    //fn search_names_sync(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_search_names_sync() }
    //}

    /// If package downgrades shall be allowed during transaction.
    /// ## `allow_downgrade`
    /// [`true`] to allow packages to be downgraded.
    #[cfg(feature = "v1_0_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_0_2")))]
    #[doc(alias = "pk_task_set_allow_downgrade")]
    fn set_allow_downgrade(&self, allow_downgrade: bool) {
        unsafe {
            ffi::pk_task_set_allow_downgrade(self.as_ref().to_glib_none().0, allow_downgrade.into_glib());
        }
    }

    /// If package reinstallation shall be allowed during transaction.
    /// ## `allow_reinstall`
    /// [`true`] to allow packages to be reinstalled.
    #[cfg(feature = "v1_0_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_0_2")))]
    #[doc(alias = "pk_task_set_allow_reinstall")]
    fn set_allow_reinstall(&self, allow_reinstall: bool) {
        unsafe {
            ffi::pk_task_set_allow_reinstall(self.as_ref().to_glib_none().0, allow_reinstall.into_glib());
        }
    }

    /// If the transaction should be prepared (depsolved, packages
    /// downloaded, etc) but not committed.
    /// ## `only_download`
    /// [`false`] to actually commit the transaction
    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "pk_task_set_only_download")]
    fn set_only_download(&self, only_download: bool) {
        unsafe {
            ffi::pk_task_set_only_download(self.as_ref().to_glib_none().0, only_download.into_glib());
        }
    }

    /// If only authenticated packages should be allowed in the
    /// transaction.
    /// ## `only_trusted`
    /// [`true`] to allow only authenticated packages
    #[cfg(feature = "v0_9_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_9_5")))]
    #[doc(alias = "pk_task_set_only_trusted")]
    fn set_only_trusted(&self, only_trusted: bool) {
        unsafe {
            ffi::pk_task_set_only_trusted(self.as_ref().to_glib_none().0, only_trusted.into_glib());
        }
    }

    /// If the simulate step should be run without the actual transaction.
    /// ## `simulate`
    /// the simulate mode
    #[cfg(feature = "v0_6_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6_10")))]
    #[doc(alias = "pk_task_set_simulate")]
    fn set_simulate(&self, simulate: bool) {
        unsafe {
            ffi::pk_task_set_simulate(self.as_ref().to_glib_none().0, simulate.into_glib());
        }
    }

    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //#[doc(alias = "pk_task_update_packages_async")]
    //fn update_packages_async(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_update_packages_async() }
    //}

    //
    //#[cfg(feature = "v0_5_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    //fn update_packages_future(&self, package_ids: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let package_ids = package_ids.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.update_packages_async(
        //        &package_ids,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_5_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_3")))]
    //#[doc(alias = "pk_task_update_packages_sync")]
    //fn update_packages_sync(&self, package_ids: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_update_packages_sync() }
    //}

    //#[cfg(feature = "v1_0_12")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v1_0_12")))]
    //#[doc(alias = "pk_task_upgrade_system_async")]
    //fn upgrade_system_async(&self, distro_id: &str, upgrade_kind: UpgradeKindEnum, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_upgrade_system_async() }
    //}

    //
    //#[cfg(feature = "v1_0_12")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v1_0_12")))]
    //fn upgrade_system_future(&self, distro_id: &str, upgrade_kind: UpgradeKindEnum, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let distro_id = String::from(distro_id);
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.upgrade_system_async(
        //        &distro_id,
        //        upgrade_kind,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v1_0_12")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v1_0_12")))]
    //#[doc(alias = "pk_task_upgrade_system_sync")]
    //fn upgrade_system_sync(&self, distro_id: &str, upgrade_kind: UpgradeKindEnum, cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_upgrade_system_sync() }
    //}

    /// Mark a EULA as accepted by the user.
    /// ## `request`
    /// request ID for EULA.
    ///
    /// # Returns
    ///
    /// [`true`] if `request` is valid.
    #[cfg(feature = "v0_5_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    #[doc(alias = "pk_task_user_accepted")]
    fn user_accepted(&self, request: u32) -> bool {
        unsafe {
            from_glib(ffi::pk_task_user_accepted(self.as_ref().to_glib_none().0, request))
        }
    }

    /// Mark a EULA as declined by the user.
    /// ## `request`
    /// request ID for EULA.
    ///
    /// # Returns
    ///
    /// [`true`] if `request` is valid.
    #[cfg(feature = "v0_5_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    #[doc(alias = "pk_task_user_declined")]
    fn user_declined(&self, request: u32) -> bool {
        unsafe {
            from_glib(ffi::pk_task_user_declined(self.as_ref().to_glib_none().0, request))
        }
    }

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //#[doc(alias = "pk_task_what_provides_async")]
    //fn what_provides_async(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) {
    //    unsafe { TODO: call ffi:pk_task_what_provides_async() }
    //}

    //
    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[cfg(not(feature = "v0_5_2"))]
    //#[cfg_attr(docsrs, doc(cfg(not(feature = "v0_5_2"))))]
    //fn what_provides_future(&self, filters: Bitfield, values: &[&str], progress_callback: /*Unimplemented*/Fn(&Progress, /*Ignored*/ProgressType), callback_ready: AsyncReadyCallback) -> Pin<Box_<dyn std::future::Future<Output = > + 'static>> {

        //let values = values.clone();
        //let callback_ready = callback_ready.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.what_provides_async(
        //        filters,
        //        &values,
        //        Some(cancellable),
        //        progress_callback,
        //        callback_ready.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v0_6_5")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v0_6_5")))]
    //#[doc(alias = "pk_task_what_provides_sync")]
    //fn what_provides_sync(&self, filters: Bitfield, values: &[&str], cancellable: Option<&impl IsA<gio::Cancellable>>, progress_callback: /*Unimplemented*/FnMut(&Progress, /*Ignored*/ProgressType), progress_user_data: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Results, glib::Error> {
    //    unsafe { TODO: call ffi:pk_task_what_provides_sync() }
    //}

    /// [`true`] if we are simulating.
    #[cfg(feature = "v0_5_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    fn get_property_simulate(&self) -> bool {
        ObjectExt::property(self.as_ref(), "simulate")
    }

    /// [`true`] if we are simulating.
    #[cfg(feature = "v0_5_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    fn set_property_simulate(&self, simulate: bool) {
        ObjectExt::set_property(self.as_ref(),"simulate", simulate)
    }

    #[cfg(feature = "v1_0_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_0_2")))]
    #[doc(alias = "allow-downgrade")]
    fn connect_allow_downgrade_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_allow_downgrade_trampoline<P: IsA<Task>, F: Fn(&P) + 'static>(this: *mut ffi::PkTask, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Task::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::allow-downgrade\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_allow_downgrade_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v1_0_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_0_2")))]
    #[doc(alias = "allow-reinstall")]
    fn connect_allow_reinstall_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_allow_reinstall_trampoline<P: IsA<Task>, F: Fn(&P) + 'static>(this: *mut ffi::PkTask, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Task::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::allow-reinstall\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_allow_reinstall_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "only-download")]
    fn connect_only_download_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_only_download_trampoline<P: IsA<Task>, F: Fn(&P) + 'static>(this: *mut ffi::PkTask, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Task::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::only-download\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_only_download_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_9_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_9_5")))]
    #[doc(alias = "only-trusted")]
    fn connect_only_trusted_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_only_trusted_trampoline<P: IsA<Task>, F: Fn(&P) + 'static>(this: *mut ffi::PkTask, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Task::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::only-trusted\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_only_trusted_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_2")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_2")))]
    #[doc(alias = "simulate")]
    fn connect_simulate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_simulate_trampoline<P: IsA<Task>, F: Fn(&P) + 'static>(this: *mut ffi::PkTask, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Task::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::simulate\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_simulate_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Task>> TaskExt for O {}
