// Generated by gir (https://github.com/gtk-rs/gir @ 1c7a6b57a5fc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 21b29d0e0c1a)
// from packagekit-gir-files
// DO NOT EDIT

#[cfg(feature = "v0_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_6")))]
use crate::{RoleEnum};
use glib::{prelude::*};
#[cfg(feature = "v0_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_6")))]
use glib::{signal::{connect_raw, SignalHandlerId},translate::*};
#[cfg(feature = "v0_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_6")))]
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PkSource")]
    pub struct Source(Object<ffi::PkSource, ffi::PkSourceClass>);

    match fn {
        type_ => || ffi::pk_source_get_type(),
    }
}

impl Source {
        pub const NONE: Option<&'static Source> = None;
    

    ///
    /// # Returns
    ///
    /// a new [`Source`][crate::Source] object.
    #[cfg(feature = "v0_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6")))]
    #[doc(alias = "pk_source_new")]
    pub fn new() -> Source {
        unsafe {
            from_glib_full(ffi::pk_source_new())
        }
    }
}

#[cfg(feature = "v0_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_6")))]
impl Default for Source {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Source>> Sealed for T {}
}

/// Trait containing all [`struct@Source`] methods.
///
/// # Implementors
///
/// [`Category`][struct@crate::Category], [`Details`][struct@crate::Details], [`DistroUpgrade`][struct@crate::DistroUpgrade], [`Error`][struct@crate::Error], [`EulaRequired`][struct@crate::EulaRequired], [`Files`][struct@crate::Files], [`ItemProgress`][struct@crate::ItemProgress], [`MediaChangeRequired`][struct@crate::MediaChangeRequired], [`Package`][struct@crate::Package], [`RepoDetail`][struct@crate::RepoDetail], [`RepoSignatureRequired`][struct@crate::RepoSignatureRequired], [`RequireRestart`][struct@crate::RequireRestart], [`Source`][struct@crate::Source], [`TransactionPast`][struct@crate::TransactionPast], [`UpdateDetail`][struct@crate::UpdateDetail]
pub trait SourceExt: IsA<Source> + sealed::Sealed + 'static {
    #[cfg(feature = "v0_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6")))]
    fn role(&self) -> RoleEnum {
        ObjectExt::property(self.as_ref(), "role")
    }

    #[cfg(feature = "v0_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6")))]
    fn set_role(&self, role: RoleEnum) {
        ObjectExt::set_property(self.as_ref(),"role", role)
    }

    #[cfg(feature = "v0_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6")))]
    #[doc(alias = "transaction-id")]
    fn transaction_id(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "transaction-id")
    }

    #[cfg(feature = "v0_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6")))]
    #[doc(alias = "transaction-id")]
    fn set_transaction_id(&self, transaction_id: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"transaction-id", transaction_id)
    }

    #[cfg(feature = "v0_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6")))]
    #[doc(alias = "role")]
    fn connect_role_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_role_trampoline<P: IsA<Source>, F: Fn(&P) + 'static>(this: *mut ffi::PkSource, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Source::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::role\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_role_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_6")))]
    #[doc(alias = "transaction-id")]
    fn connect_transaction_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_transaction_id_trampoline<P: IsA<Source>, F: Fn(&P) + 'static>(this: *mut ffi::PkSource, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Source::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::transaction-id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_transaction_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Source>> SourceExt for O {}
