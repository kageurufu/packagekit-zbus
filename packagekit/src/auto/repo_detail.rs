// Generated by gir (https://github.com/gtk-rs/gir @ 1c7a6b57a5fc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 21b29d0e0c1a)
// from packagekit-gir-files
// DO NOT EDIT

use crate::{Source};
use glib::{prelude::*};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use glib::{signal::{connect_raw, SignalHandlerId},translate::*};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PkRepoDetail")]
    pub struct RepoDetail(Object<ffi::PkRepoDetail, ffi::PkRepoDetailClass>) @extends Source;

    match fn {
        type_ => || ffi::pk_repo_detail_get_type(),
    }
}

impl RepoDetail {
        pub const NONE: Option<&'static RepoDetail> = None;
    

    ///
    /// # Returns
    ///
    /// a new [`RepoDetail`][crate::RepoDetail] object.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "pk_repo_detail_new")]
    pub fn new() -> RepoDetail {
        unsafe {
            from_glib_full(ffi::pk_repo_detail_new())
        }
    }
}

#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
impl Default for RepoDetail {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::RepoDetail>> Sealed for T {}
}

/// Trait containing all [`struct@RepoDetail`] methods.
///
/// # Implementors
///
/// [`RepoDetail`][struct@crate::RepoDetail]
pub trait RepoDetailExt: IsA<RepoDetail> + sealed::Sealed + 'static {
    /// Gets the repository description.
    ///
    /// # Returns
    ///
    /// string ID, e.g. "Fedora 20 - i386"
    #[cfg(feature = "v0_9_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_9_1")))]
    #[doc(alias = "pk_repo_detail_get_description")]
    #[doc(alias = "get_description")]
    fn description(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_repo_detail_get_description(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the repository enabled status.
    ///
    /// # Returns
    ///
    /// [`true`] for enabled
    #[cfg(feature = "v0_9_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_9_1")))]
    #[doc(alias = "pk_repo_detail_get_enabled")]
    #[doc(alias = "get_enabled")]
    fn is_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::pk_repo_detail_get_enabled(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the repository ID.
    ///
    /// # Returns
    ///
    /// string ID, e.g. "fedora"
    #[cfg(feature = "v0_9_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_9_1")))]
    #[doc(alias = "pk_repo_detail_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_repo_detail_get_id(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_description(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "description")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_description(&self, description: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"description", description)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_enabled(&self) -> bool {
        ObjectExt::property(self.as_ref(), "enabled")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_enabled(&self, enabled: bool) {
        ObjectExt::set_property(self.as_ref(),"enabled", enabled)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "repo-id")]
    fn repo_id(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "repo-id")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "repo-id")]
    fn set_repo_id(&self, repo_id: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"repo-id", repo_id)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "description")]
    fn connect_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_description_trampoline<P: IsA<RepoDetail>, F: Fn(&P) + 'static>(this: *mut ffi::PkRepoDetail, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(RepoDetail::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::description\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_description_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "enabled")]
    fn connect_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enabled_trampoline<P: IsA<RepoDetail>, F: Fn(&P) + 'static>(this: *mut ffi::PkRepoDetail, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(RepoDetail::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enabled\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_enabled_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "repo-id")]
    fn connect_repo_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_repo_id_trampoline<P: IsA<RepoDetail>, F: Fn(&P) + 'static>(this: *mut ffi::PkRepoDetail, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(RepoDetail::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::repo-id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_repo_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<RepoDetail>> RepoDetailExt for O {}
