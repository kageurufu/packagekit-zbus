// Generated by gir (https://github.com/gtk-rs/gir @ 1c7a6b57a5fc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 21b29d0e0c1a)
// from packagekit-gir-files
// DO NOT EDIT

use crate::{Source};
#[cfg(feature = "v0_5_5")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
use crate::{ErrorEnum};
use glib::{prelude::*};
#[cfg(feature = "v0_5_5")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
use glib::{signal::{connect_raw, SignalHandlerId},translate::*};
#[cfg(feature = "v0_5_5")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PkError")]
    pub struct Error(Object<ffi::PkError, ffi::PkErrorClass>) @extends Source;

    match fn {
        type_ => || ffi::pk_error_get_type(),
    }
}

impl Error {
        pub const NONE: Option<&'static Error> = None;
    

    ///
    /// # Returns
    ///
    /// a new [`Error`][crate::Error] object.
    #[cfg(feature = "v0_5_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    #[doc(alias = "pk_error_new")]
    pub fn new() -> Error {
        unsafe {
            from_glib_full(ffi::pk_error_new())
        }
    }
}

#[cfg(feature = "v0_5_5")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
impl Default for Error {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Error>> Sealed for T {}
}

/// Trait containing all [`struct@Error`] methods.
///
/// # Implementors
///
/// [`Error`][struct@crate::Error]
pub trait ErrorExt: IsA<Error> + sealed::Sealed + 'static {
    /// Get the error code for this error.
    ///
    /// # Returns
    ///
    /// a [`ErrorEnum`][crate::ErrorEnum]
    #[cfg(feature = "v0_5_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    #[doc(alias = "pk_error_get_code")]
    #[doc(alias = "get_code")]
    fn code(&self) -> ErrorEnum {
        unsafe {
            from_glib(ffi::pk_error_get_code(self.as_ref().to_glib_none().0))
        }
    }

    /// Get details for this error.
    ///
    /// # Returns
    ///
    /// an string description
    #[cfg(feature = "v0_5_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    #[doc(alias = "pk_error_get_details")]
    #[doc(alias = "get_details")]
    fn details(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_error_get_details(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v0_5_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    fn set_code(&self, code: ErrorEnum) {
        ObjectExt::set_property(self.as_ref(),"code", code)
    }

    #[cfg(feature = "v0_5_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    fn set_details(&self, details: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"details", details)
    }

    #[cfg(feature = "v0_5_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    #[doc(alias = "code")]
    fn connect_code_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_code_trampoline<P: IsA<Error>, F: Fn(&P) + 'static>(this: *mut ffi::PkError, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Error::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::code\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_code_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_5")))]
    #[doc(alias = "details")]
    fn connect_details_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_details_trampoline<P: IsA<Error>, F: Fn(&P) + 'static>(this: *mut ffi::PkError, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Error::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::details\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_details_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Error>> ErrorExt for O {}
