// Generated by gir (https://github.com/gtk-rs/gir @ 1c7a6b57a5fc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 21b29d0e0c1a)
// from packagekit-gir-files
// DO NOT EDIT

use crate::{Source};
use glib::{prelude::*};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use glib::{signal::{connect_raw, SignalHandlerId},translate::*};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PkEulaRequired")]
    pub struct EulaRequired(Object<ffi::PkEulaRequired, ffi::PkEulaRequiredClass>) @extends Source;

    match fn {
        type_ => || ffi::pk_eula_required_get_type(),
    }
}

impl EulaRequired {
        pub const NONE: Option<&'static EulaRequired> = None;
    

    ///
    /// # Returns
    ///
    /// a new [`EulaRequired`][crate::EulaRequired] object.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "pk_eula_required_new")]
    pub fn new() -> EulaRequired {
        unsafe {
            from_glib_full(ffi::pk_eula_required_new())
        }
    }
}

#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
impl Default for EulaRequired {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::EulaRequired>> Sealed for T {}
}

/// Trait containing all [`struct@EulaRequired`] methods.
///
/// # Implementors
///
/// [`EulaRequired`][struct@crate::EulaRequired]
pub trait EulaRequiredExt: IsA<EulaRequired> + sealed::Sealed + 'static {
    /// Get the ID for this EULA
    ///
    /// # Returns
    ///
    /// an ID
    #[cfg(feature = "v1_1_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_1_8")))]
    #[doc(alias = "pk_eula_required_get_eula_id")]
    #[doc(alias = "get_eula_id")]
    fn eula_id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_eula_required_get_eula_id(self.as_ref().to_glib_none().0))
        }
    }

    /// Get the text of the license agreement.
    ///
    /// # Returns
    ///
    /// license agreement text
    #[cfg(feature = "v1_1_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_1_8")))]
    #[doc(alias = "pk_eula_required_get_license_agreement")]
    #[doc(alias = "get_license_agreement")]
    fn license_agreement(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_eula_required_get_license_agreement(self.as_ref().to_glib_none().0))
        }
    }

    /// Get the PackageID this EULA is for
    ///
    /// # Returns
    ///
    /// a PackageID
    #[cfg(feature = "v1_1_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_1_8")))]
    #[doc(alias = "pk_eula_required_get_package_id")]
    #[doc(alias = "get_package_id")]
    fn package_id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_eula_required_get_package_id(self.as_ref().to_glib_none().0))
        }
    }

    /// Get the vendor this EULA is from.
    ///
    /// # Returns
    ///
    /// license vendor name
    #[cfg(feature = "v1_1_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_1_8")))]
    #[doc(alias = "pk_eula_required_get_vendor_name")]
    #[doc(alias = "get_vendor_name")]
    fn vendor_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_eula_required_get_vendor_name(self.as_ref().to_glib_none().0))
        }
    }

    /// ID for this EULA.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "eula-id")]
    fn get_property_eula_id(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "eula-id")
    }

    /// ID for this EULA.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "eula-id")]
    fn set_eula_id(&self, eula_id: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"eula-id", eula_id)
    }

    /// The text of the license agreement.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "license-agreement")]
    fn get_property_license_agreement(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "license-agreement")
    }

    /// The text of the license agreement.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "license-agreement")]
    fn set_license_agreement(&self, license_agreement: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"license-agreement", license_agreement)
    }

    /// PackageID this EULA is for.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "package-id")]
    fn get_property_package_id(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "package-id")
    }

    /// PackageID this EULA is for.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "package-id")]
    fn set_package_id(&self, package_id: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"package-id", package_id)
    }

    /// Vendor this EULA is from.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "vendor-name")]
    fn get_property_vendor_name(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "vendor-name")
    }

    /// Vendor this EULA is from.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "vendor-name")]
    fn set_vendor_name(&self, vendor_name: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"vendor-name", vendor_name)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "eula-id")]
    fn connect_eula_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_eula_id_trampoline<P: IsA<EulaRequired>, F: Fn(&P) + 'static>(this: *mut ffi::PkEulaRequired, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(EulaRequired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::eula-id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_eula_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "license-agreement")]
    fn connect_license_agreement_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_license_agreement_trampoline<P: IsA<EulaRequired>, F: Fn(&P) + 'static>(this: *mut ffi::PkEulaRequired, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(EulaRequired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::license-agreement\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_license_agreement_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "package-id")]
    fn connect_package_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_package_id_trampoline<P: IsA<EulaRequired>, F: Fn(&P) + 'static>(this: *mut ffi::PkEulaRequired, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(EulaRequired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::package-id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_package_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "vendor-name")]
    fn connect_vendor_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vendor_name_trampoline<P: IsA<EulaRequired>, F: Fn(&P) + 'static>(this: *mut ffi::PkEulaRequired, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(EulaRequired::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::vendor-name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_vendor_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<EulaRequired>> EulaRequiredExt for O {}
