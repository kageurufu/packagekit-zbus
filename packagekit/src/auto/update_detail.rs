// Generated by gir (https://github.com/gtk-rs/gir @ 1c7a6b57a5fc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 21b29d0e0c1a)
// from packagekit-gir-files
// DO NOT EDIT

use crate::{Source};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use crate::{RestartEnum,UpdateStateEnum};
use glib::{prelude::*};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use glib::{signal::{connect_raw, SignalHandlerId},translate::*};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PkUpdateDetail")]
    pub struct UpdateDetail(Object<ffi::PkUpdateDetail, ffi::PkUpdateDetailClass>) @extends Source;

    match fn {
        type_ => || ffi::pk_update_detail_get_type(),
    }
}

impl UpdateDetail {
        pub const NONE: Option<&'static UpdateDetail> = None;
    

    ///
    /// # Returns
    ///
    /// a new [`UpdateDetail`][crate::UpdateDetail] object.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "pk_update_detail_new")]
    pub fn new() -> UpdateDetail {
        unsafe {
            from_glib_full(ffi::pk_update_detail_new())
        }
    }
}

#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
impl Default for UpdateDetail {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::UpdateDetail>> Sealed for T {}
}

/// Trait containing all [`struct@UpdateDetail`] methods.
///
/// # Implementors
///
/// [`UpdateDetail`][struct@crate::UpdateDetail]
pub trait UpdateDetailExt: IsA<UpdateDetail> + sealed::Sealed + 'static {
    /// Gets the update detail bugzilla URLs.
    ///
    /// # Returns
    ///
    /// string values
    #[cfg(feature = "v0_8_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_8")))]
    #[doc(alias = "pk_update_detail_get_bugzilla_urls")]
    #[doc(alias = "get_bugzilla_urls")]
    fn bugzilla_urls(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::pk_update_detail_get_bugzilla_urls(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the update detail changelog.
    ///
    /// # Returns
    ///
    /// string values
    #[cfg(feature = "v0_8_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_8")))]
    #[doc(alias = "pk_update_detail_get_changelog")]
    #[doc(alias = "get_changelog")]
    fn changelog(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_update_detail_get_changelog(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the update detail CVE URLs.
    ///
    /// # Returns
    ///
    /// string values
    #[cfg(feature = "v0_8_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_8")))]
    #[doc(alias = "pk_update_detail_get_cve_urls")]
    #[doc(alias = "get_cve_urls")]
    fn cve_urls(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::pk_update_detail_get_cve_urls(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the update detail issued string.
    ///
    /// # Returns
    ///
    /// string values
    #[cfg(feature = "v0_8_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_8")))]
    #[doc(alias = "pk_update_detail_get_issued")]
    #[doc(alias = "get_issued")]
    fn issued(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_update_detail_get_issued(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the update detail obsoletes IDs.
    ///
    /// # Returns
    ///
    /// string values
    #[cfg(feature = "v0_8_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_8")))]
    #[doc(alias = "pk_update_detail_get_obsoletes")]
    #[doc(alias = "get_obsoletes")]
    fn obsoletes(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::pk_update_detail_get_obsoletes(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the update detail package ID.
    ///
    /// # Returns
    ///
    /// string values
    #[cfg(feature = "v0_8_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_8")))]
    #[doc(alias = "pk_update_detail_get_package_id")]
    #[doc(alias = "get_package_id")]
    fn package_id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_update_detail_get_package_id(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the update detail restart kind.
    ///
    /// # Returns
    ///
    /// enum values
    #[cfg(feature = "v0_8_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_8")))]
    #[doc(alias = "pk_update_detail_get_restart")]
    #[doc(alias = "get_restart")]
    fn restart(&self) -> RestartEnum {
        unsafe {
            from_glib(ffi::pk_update_detail_get_restart(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the update detail state.
    ///
    /// # Returns
    ///
    /// enum value
    #[cfg(feature = "v0_8_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_8")))]
    #[doc(alias = "pk_update_detail_get_state")]
    #[doc(alias = "get_state")]
    fn state(&self) -> UpdateStateEnum {
        unsafe {
            from_glib(ffi::pk_update_detail_get_state(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the update detail update text.
    ///
    /// # Returns
    ///
    /// string values
    #[cfg(feature = "v0_8_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_8")))]
    #[doc(alias = "pk_update_detail_get_update_text")]
    #[doc(alias = "get_update_text")]
    fn update_text(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_update_detail_get_update_text(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the update detail updated string.
    ///
    /// # Returns
    ///
    /// string values
    #[cfg(feature = "v0_8_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_8")))]
    #[doc(alias = "pk_update_detail_get_updated")]
    #[doc(alias = "get_updated")]
    fn updated(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_update_detail_get_updated(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the update detail updates IDs.
    ///
    /// # Returns
    ///
    /// string values
    #[cfg(feature = "v0_8_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_8")))]
    #[doc(alias = "pk_update_detail_get_updates")]
    #[doc(alias = "get_updates")]
    fn updates(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::pk_update_detail_get_updates(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the update detail vendor URLs.
    ///
    /// # Returns
    ///
    /// string values
    #[cfg(feature = "v0_8_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_8")))]
    #[doc(alias = "pk_update_detail_get_vendor_urls")]
    #[doc(alias = "get_vendor_urls")]
    fn vendor_urls(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::pk_update_detail_get_vendor_urls(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "bugzilla-urls")]
    fn get_property_bugzilla_urls(&self) -> Vec<glib::GString> {
        ObjectExt::property(self.as_ref(), "bugzilla-urls")
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "bugzilla-urls")]
    fn set_bugzilla_urls(&self, bugzilla_urls: &[&str]) {
        ObjectExt::set_property(self.as_ref(),"bugzilla-urls", bugzilla_urls)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_changelog(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "changelog")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_changelog(&self, changelog: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"changelog", changelog)
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "cve-urls")]
    fn get_property_cve_urls(&self) -> Vec<glib::GString> {
        ObjectExt::property(self.as_ref(), "cve-urls")
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "cve-urls")]
    fn set_cve_urls(&self, cve_urls: &[&str]) {
        ObjectExt::set_property(self.as_ref(),"cve-urls", cve_urls)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_issued(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "issued")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_issued(&self, issued: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"issued", issued)
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    fn get_property_obsoletes(&self) -> Vec<glib::GString> {
        ObjectExt::property(self.as_ref(), "obsoletes")
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    fn set_obsoletes(&self, obsoletes: &[&str]) {
        ObjectExt::set_property(self.as_ref(),"obsoletes", obsoletes)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "package-id")]
    fn get_property_package_id(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "package-id")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "package-id")]
    fn set_package_id(&self, package_id: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"package-id", package_id)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_restart(&self) -> RestartEnum {
        ObjectExt::property(self.as_ref(), "restart")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_restart(&self, restart: RestartEnum) {
        ObjectExt::set_property(self.as_ref(),"restart", restart)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_state(&self) -> UpdateStateEnum {
        ObjectExt::property(self.as_ref(), "state")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_state(&self, state: UpdateStateEnum) {
        ObjectExt::set_property(self.as_ref(),"state", state)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-text")]
    fn get_property_update_text(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "update-text")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-text")]
    fn set_update_text(&self, update_text: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"update-text", update_text)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_updated(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "updated")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_updated(&self, updated: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"updated", updated)
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    fn get_property_updates(&self) -> Vec<glib::GString> {
        ObjectExt::property(self.as_ref(), "updates")
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    fn set_updates(&self, updates: &[&str]) {
        ObjectExt::set_property(self.as_ref(),"updates", updates)
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "vendor-urls")]
    fn get_property_vendor_urls(&self) -> Vec<glib::GString> {
        ObjectExt::property(self.as_ref(), "vendor-urls")
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "vendor-urls")]
    fn set_vendor_urls(&self, vendor_urls: &[&str]) {
        ObjectExt::set_property(self.as_ref(),"vendor-urls", vendor_urls)
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "bugzilla-urls")]
    fn connect_bugzilla_urls_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_bugzilla_urls_trampoline<P: IsA<UpdateDetail>, F: Fn(&P) + 'static>(this: *mut ffi::PkUpdateDetail, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UpdateDetail::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::bugzilla-urls\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_bugzilla_urls_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "changelog")]
    fn connect_changelog_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_changelog_trampoline<P: IsA<UpdateDetail>, F: Fn(&P) + 'static>(this: *mut ffi::PkUpdateDetail, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UpdateDetail::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::changelog\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_changelog_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "cve-urls")]
    fn connect_cve_urls_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cve_urls_trampoline<P: IsA<UpdateDetail>, F: Fn(&P) + 'static>(this: *mut ffi::PkUpdateDetail, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UpdateDetail::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cve-urls\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_cve_urls_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "issued")]
    fn connect_issued_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_issued_trampoline<P: IsA<UpdateDetail>, F: Fn(&P) + 'static>(this: *mut ffi::PkUpdateDetail, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UpdateDetail::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::issued\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_issued_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "obsoletes")]
    fn connect_obsoletes_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_obsoletes_trampoline<P: IsA<UpdateDetail>, F: Fn(&P) + 'static>(this: *mut ffi::PkUpdateDetail, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UpdateDetail::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::obsoletes\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_obsoletes_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "package-id")]
    fn connect_package_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_package_id_trampoline<P: IsA<UpdateDetail>, F: Fn(&P) + 'static>(this: *mut ffi::PkUpdateDetail, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UpdateDetail::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::package-id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_package_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "restart")]
    fn connect_restart_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_restart_trampoline<P: IsA<UpdateDetail>, F: Fn(&P) + 'static>(this: *mut ffi::PkUpdateDetail, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UpdateDetail::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::restart\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_restart_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "state")]
    fn connect_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_state_trampoline<P: IsA<UpdateDetail>, F: Fn(&P) + 'static>(this: *mut ffi::PkUpdateDetail, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UpdateDetail::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::state\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_state_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "update-text")]
    fn connect_update_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_update_text_trampoline<P: IsA<UpdateDetail>, F: Fn(&P) + 'static>(this: *mut ffi::PkUpdateDetail, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UpdateDetail::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::update-text\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_update_text_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "updated")]
    fn connect_updated_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_updated_trampoline<P: IsA<UpdateDetail>, F: Fn(&P) + 'static>(this: *mut ffi::PkUpdateDetail, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UpdateDetail::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::updated\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_updated_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "updates")]
    fn connect_updates_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_updates_trampoline<P: IsA<UpdateDetail>, F: Fn(&P) + 'static>(this: *mut ffi::PkUpdateDetail, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UpdateDetail::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::updates\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_updates_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_8_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_1")))]
    #[doc(alias = "vendor-urls")]
    fn connect_vendor_urls_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vendor_urls_trampoline<P: IsA<UpdateDetail>, F: Fn(&P) + 'static>(this: *mut ffi::PkUpdateDetail, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UpdateDetail::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::vendor-urls\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_vendor_urls_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<UpdateDetail>> UpdateDetailExt for O {}
