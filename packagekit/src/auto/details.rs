// Generated by gir (https://github.com/gtk-rs/gir @ 1c7a6b57a5fc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 21b29d0e0c1a)
// from packagekit-gir-files
// DO NOT EDIT

use crate::{Source};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use crate::{GroupEnum};
use glib::{prelude::*};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use glib::{signal::{connect_raw, SignalHandlerId},translate::*};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PkDetails")]
    pub struct Details(Object<ffi::PkDetails, ffi::PkDetailsClass>) @extends Source;

    match fn {
        type_ => || ffi::pk_details_get_type(),
    }
}

impl Details {
        pub const NONE: Option<&'static Details> = None;
    

    ///
    /// # Returns
    ///
    /// a new [`Details`][crate::Details] object.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "pk_details_new")]
    pub fn new() -> Details {
        unsafe {
            from_glib_full(ffi::pk_details_new())
        }
    }
}

#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
impl Default for Details {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Details>> Sealed for T {}
}

/// Trait containing all [`struct@Details`] methods.
///
/// # Implementors
///
/// [`Details`][struct@crate::Details]
pub trait DetailsExt: IsA<Details> + sealed::Sealed + 'static {
    /// Gets the description for the details object.
    ///
    /// # Returns
    ///
    /// string value
    #[cfg(feature = "v0_8_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_12")))]
    #[doc(alias = "pk_details_get_description")]
    #[doc(alias = "get_description")]
    fn description(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_details_get_description(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the package download size.
    ///
    /// # Returns
    ///
    /// the package download size, 0 if already downloaded and G_MAXUINT64 when unknown
    #[cfg(feature = "v1_2_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_2_4")))]
    #[doc(alias = "pk_details_get_download_size")]
    #[doc(alias = "get_download_size")]
    fn download_size(&self) -> u64 {
        unsafe {
            ffi::pk_details_get_download_size(self.as_ref().to_glib_none().0)
        }
    }

    /// Gets the group for the details object.
    ///
    /// # Returns
    ///
    /// string value
    #[cfg(feature = "v0_8_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_12")))]
    #[doc(alias = "pk_details_get_group")]
    #[doc(alias = "get_group")]
    fn group(&self) -> GroupEnum {
        unsafe {
            from_glib(ffi::pk_details_get_group(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the license for the details object.
    ///
    /// # Returns
    ///
    /// string value
    #[cfg(feature = "v0_8_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_12")))]
    #[doc(alias = "pk_details_get_license")]
    #[doc(alias = "get_license")]
    fn license(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_details_get_license(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the PackageId for the details object.
    ///
    /// # Returns
    ///
    /// string value
    #[cfg(feature = "v0_8_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_12")))]
    #[doc(alias = "pk_details_get_package_id")]
    #[doc(alias = "get_package_id")]
    fn package_id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_details_get_package_id(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the size for the details object: for installed packages it will return
    /// the installed size, for the rest the package size.
    ///
    /// # Returns
    ///
    /// string value
    #[cfg(feature = "v0_8_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_12")))]
    #[doc(alias = "pk_details_get_size")]
    #[doc(alias = "get_size")]
    fn size(&self) -> u64 {
        unsafe {
            ffi::pk_details_get_size(self.as_ref().to_glib_none().0)
        }
    }

    /// Gets the summary for the details object.
    ///
    /// # Returns
    ///
    /// string value
    #[cfg(feature = "v0_9_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_9_1")))]
    #[doc(alias = "pk_details_get_summary")]
    #[doc(alias = "get_summary")]
    fn summary(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_details_get_summary(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the url for the details object.
    ///
    /// # Returns
    ///
    /// string value
    #[cfg(feature = "v0_8_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_8_12")))]
    #[doc(alias = "pk_details_get_url")]
    #[doc(alias = "get_url")]
    fn url(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_details_get_url(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_description(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "description")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_description(&self, description: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"description", description)
    }

    #[cfg(feature = "v1_2_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_2_4")))]
    #[doc(alias = "download-size")]
    fn set_download_size(&self, download_size: u64) {
        ObjectExt::set_property(self.as_ref(),"download-size", download_size)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_group(&self) -> GroupEnum {
        ObjectExt::property(self.as_ref(), "group")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_group(&self, group: GroupEnum) {
        ObjectExt::set_property(self.as_ref(),"group", group)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_license(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "license")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_license(&self, license: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"license", license)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "package-id")]
    fn get_property_package_id(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "package-id")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "package-id")]
    fn set_package_id(&self, package_id: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"package-id", package_id)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_size(&self) -> u64 {
        ObjectExt::property(self.as_ref(), "size")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_size(&self, size: u64) {
        ObjectExt::set_property(self.as_ref(),"size", size)
    }

    #[cfg(feature = "v0_9_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_9_1")))]
    fn set_summary(&self, summary: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"summary", summary)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_url(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "url")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_url(&self, url: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"url", url)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "description")]
    fn connect_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_description_trampoline<P: IsA<Details>, F: Fn(&P) + 'static>(this: *mut ffi::PkDetails, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Details::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::description\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_description_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v1_2_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_2_4")))]
    #[doc(alias = "download-size")]
    fn connect_download_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_download_size_trampoline<P: IsA<Details>, F: Fn(&P) + 'static>(this: *mut ffi::PkDetails, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Details::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::download-size\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_download_size_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "group")]
    fn connect_group_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_group_trampoline<P: IsA<Details>, F: Fn(&P) + 'static>(this: *mut ffi::PkDetails, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Details::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::group\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_group_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "license")]
    fn connect_license_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_license_trampoline<P: IsA<Details>, F: Fn(&P) + 'static>(this: *mut ffi::PkDetails, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Details::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::license\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_license_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "package-id")]
    fn connect_package_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_package_id_trampoline<P: IsA<Details>, F: Fn(&P) + 'static>(this: *mut ffi::PkDetails, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Details::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::package-id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_package_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "size")]
    fn connect_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_size_trampoline<P: IsA<Details>, F: Fn(&P) + 'static>(this: *mut ffi::PkDetails, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Details::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::size\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_size_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_9_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_9_1")))]
    #[doc(alias = "summary")]
    fn connect_summary_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_summary_trampoline<P: IsA<Details>, F: Fn(&P) + 'static>(this: *mut ffi::PkDetails, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Details::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::summary\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_summary_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "url")]
    fn connect_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_url_trampoline<P: IsA<Details>, F: Fn(&P) + 'static>(this: *mut ffi::PkDetails, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Details::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::url\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_url_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Details>> DetailsExt for O {}
