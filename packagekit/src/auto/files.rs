// Generated by gir (https://github.com/gtk-rs/gir @ 1c7a6b57a5fc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 21b29d0e0c1a)
// from packagekit-gir-files
// DO NOT EDIT

use crate::{Source};
use glib::{prelude::*};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use glib::{signal::{connect_raw, SignalHandlerId},translate::*};
#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "PkFiles")]
    pub struct Files(Object<ffi::PkFiles, ffi::PkFilesClass>) @extends Source;

    match fn {
        type_ => || ffi::pk_files_get_type(),
    }
}

impl Files {
        pub const NONE: Option<&'static Files> = None;
    

    ///
    /// # Returns
    ///
    /// a new [`Files`][crate::Files] object.
    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "pk_files_new")]
    pub fn new() -> Files {
        unsafe {
            from_glib_full(ffi::pk_files_new())
        }
    }
}

#[cfg(feature = "v0_5_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
impl Default for Files {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Files>> Sealed for T {}
}

/// Trait containing all [`struct@Files`] methods.
///
/// # Implementors
///
/// [`Files`][struct@crate::Files]
pub trait FilesExt: IsA<Files> + sealed::Sealed + 'static {
    /// Gets the file list
    ///
    /// # Returns
    ///
    /// Gets the file list for the files object
    #[cfg(feature = "v0_9_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_9_1")))]
    #[doc(alias = "pk_files_get_files")]
    #[doc(alias = "get_files")]
    fn files(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::pk_files_get_files(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the package-id
    ///
    /// # Returns
    ///
    /// Gets the package_id for the files object
    #[cfg(feature = "v0_9_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_9_1")))]
    #[doc(alias = "pk_files_get_package_id")]
    #[doc(alias = "get_package_id")]
    fn package_id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pk_files_get_package_id(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn get_property_files(&self) -> Vec<glib::GString> {
        ObjectExt::property(self.as_ref(), "files")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    fn set_files(&self, files: &[&str]) {
        ObjectExt::set_property(self.as_ref(),"files", files)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "package-id")]
    fn get_property_package_id(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "package-id")
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "package-id")]
    fn set_package_id(&self, package_id: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"package-id", package_id)
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "files")]
    fn connect_files_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_files_trampoline<P: IsA<Files>, F: Fn(&P) + 'static>(this: *mut ffi::PkFiles, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Files::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::files\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_files_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v0_5_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v0_5_4")))]
    #[doc(alias = "package-id")]
    fn connect_package_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_package_id_trampoline<P: IsA<Files>, F: Fn(&P) + 'static>(this: *mut ffi::PkFiles, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Files::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::package-id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_package_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Files>> FilesExt for O {}
